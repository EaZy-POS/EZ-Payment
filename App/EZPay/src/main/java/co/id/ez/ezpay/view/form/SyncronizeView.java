/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package co.id.ez.ezpay.view.form;

import co.id.ez.ezpay.abstracts.AbstractView;
import co.id.ez.ezpay.app.Common;
import co.id.ez.ezpay.enums.MasterDataType;
import co.id.ez.ezpay.enums.util.Icons;
import co.id.ez.ezpay.msg.BillerResponse;
import co.id.ez.ezpay.msg.data.CentralDataRequest;
import co.id.ez.ezpay.msg.data.GetMPBiller;
import co.id.ez.ezpay.msg.data.pdam.GetPDAMBiller;
import co.id.ez.ezpay.msg.data.prepaid.GetPrepaidDenom;
import co.id.ez.ezpay.msg.data.voucher.GetVoucherProduct;
import co.id.ez.ezpay.view.tabmaster.MasterData;
import com.json.JSONArray;
import com.json.JSONObject;
import java.io.File;
import java.io.FileWriter;
import java.sql.SQLException;
import java.util.List;
import java.util.Scanner;

/**
 *
 * @author RCS
 */
public class SyncronizeView extends AbstractView {

    /**
     * Creates new form SyncronizeView
     */
    public SyncronizeView() {
        initComponents();
        initForm();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        panel_sync = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txt_lastsync = new javax.swing.JLabel();
        btn_sync = new javax.swing.JButton();
        panelprogress = new javax.swing.JPanel();
        txt_title = new javax.swing.JLabel();
        progressbar = new javax.swing.JProgressBar();
        tabData = new javax.swing.JTabbedPane();

        setLayout(new java.awt.BorderLayout());

        panel_sync.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sinkronisasi", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 13), new java.awt.Color(255, 255, 255))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Terakhir : ");

        txt_lastsync.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txt_lastsync.setForeground(new java.awt.Color(255, 255, 255));
        txt_lastsync.setText("Kamis, 10 Agustus 2024 10:09:00");

        btn_sync.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btn_sync.setText("Tarik Data");
        btn_sync.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_sync.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_syncActionPerformed(evt);
            }
        });

        txt_title.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txt_title.setForeground(new java.awt.Color(255, 255, 255));
        txt_title.setText("Progress .....");

        javax.swing.GroupLayout panelprogressLayout = new javax.swing.GroupLayout(panelprogress);
        panelprogress.setLayout(panelprogressLayout);
        panelprogressLayout.setHorizontalGroup(
            panelprogressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelprogressLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelprogressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(progressbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txt_title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelprogressLayout.setVerticalGroup(
            panelprogressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelprogressLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txt_title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panel_syncLayout = new javax.swing.GroupLayout(panel_sync);
        panel_sync.setLayout(panel_syncLayout);
        panel_syncLayout.setHorizontalGroup(
            panel_syncLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelprogress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panel_syncLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_syncLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_syncLayout.createSequentialGroup()
                        .addComponent(btn_sync, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panel_syncLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_lastsync, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panel_syncLayout.setVerticalGroup(
            panel_syncLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_syncLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_syncLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txt_lastsync))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_sync)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelprogress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel_sync, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel_sync, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jPanel2, java.awt.BorderLayout.PAGE_START);
        add(tabData, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_syncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_syncActionPerformed
        // TODO add your handling code here:
        int opt = Common.showConfirmMessage("Sinkronsasi data?", this);
        if(opt == 0){
            syncData();
        }
        
    }//GEN-LAST:event_btn_syncActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_sync;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel panel_sync;
    private javax.swing.JPanel panelprogress;
    private javax.swing.JProgressBar progressbar;
    private javax.swing.JTabbedPane tabData;
    private javax.swing.JLabel txt_lastsync;
    private javax.swing.JLabel txt_title;
    // End of variables declaration//GEN-END:variables

    @Override
    public final void initForm() {
        Common.setOpaqueComponent(false, this, jPanel2, panel_sync, panelprogress, tabData, progressbar);
        Common.setVisibility(false, panelprogress);
        loadTabData(true);
    }

    @Override
    public void resetForm() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    private void loadTabData(boolean isAsync){
        if (isAsync) {
            new Thread(() -> {
                loadTabData();
            }).start();
        }else{
            loadTabData();
        }
    }
    
    public void setMaxProgressbar(int val){
        progressbar.setMaximum(val);
    }
    
    public void showProgressbar(boolean show){
        Common.setVisibility(show, panelprogress);
    }
    
    private void loadTabData() {
        readLastSync();
        tabData.removeAll();
        tabData.repaint();
        tabData.revalidate();

        Common.setVisibility(true, panelprogress);
        progressbar.setMaximum(4);
        changeProgress("Proses menampilkan data", 0);

        changeProgress("Menampilkan data PDAM Biller", 0);
        tabData.addTab("PDAM Biller", Icons.SMALL_PAGE.get(), new MasterData(MasterDataType.PDAMBiller));
        changeProgress("Menampilkan data PDAM Biller selesai", 1);

        changeProgress("Menampilkan data multi payment Biller", 1);
        tabData.addTab("Multi Payment Biller", Icons.SMALL_PAGE.get(), new MasterData(MasterDataType.MultiPaymentBiller));
        changeProgress("Menampilkan data multi payment Biller selesai", 2);

        changeProgress("Menampilkan data produk voucher", 2);
        tabData.addTab("Voucher Produk", Icons.SMALL_PAGE.get(), new MasterData(MasterDataType.VoucherProduct, this, true));
        changeProgress("Menampilkan data produk voucher selesai", 3);

        changeProgress("Menampilkan data denom PLN Prepaid", 3);
        tabData.addTab("Prepaid Denom", Icons.SMALL_PAGE.get(), new MasterData(MasterDataType.PrepaidDenom, this, true));
        changeProgress("Menampilkan data denom PLN Prepaid selesai", 4);
        Common.setVisibility(false, panelprogress);
    }
    
    public void changeProgress(String progressdesc, int value) {
        txt_title.setText(progressdesc.concat(" ..."));
        progressbar.setValue(value);
    }
    
    private void syncData(){
        new Thread(() -> {
            Common.setVisibility(true, panelprogress);
            Common.activateComponent(false, btn_sync);
            try {
                progressbar.setMaximum(6);
                changeProgress("Sinkronisasi data", 0);
                syncronizeData(new GetPDAMBiller(), "biller PDAM", 0);
                syncronizeData(new GetMPBiller(), "biller multi payment", 1);
                syncronizeData(new GetVoucherProduct(), "produk voucher", 2);
                syncronizeData(new GetPrepaidDenom(), "denom PLN Prepaid", 3);
                writeLastSync();
                changeProgress("", 4);
                loadTabData();
                changeProgress("", 5);
                changeProgress("Proses sinkronisasi data selesai", 6);

            }  catch (Exception e) {
                changeProgress("Proses sinkronisasi data gagal", 6);
                Common.errorLog("[Exception] Failed execute syncData", e);
            }

            Common.activateComponent(true, btn_sync);
            Common.setVisibility(false, panelprogress);
        }).start();
    }
    
    private void syncronizeData(CentralDataRequest req, String process, int index){
        try {
            changeProgress("Sinkronisasi data " + process, index);
            BillerResponse resp = sendRequest(req, "GET", true);

            if (resp != null) {
                changeProgress("Sukses memuat data " + process, index + 1);
                JSONObject respObj = resp.getPayload();
                JSONArray data = respObj.getJSONArray("data");
                List<String> exsData = controller.getMappingExsistingData(req.getType());

                progressbar.setMaximum(data.length());
                changeProgress("Menyimpan data " + process, 0);

                for (int i = 0; i < data.length(); i++) {
                    JSONObject result = data.getJSONObject(i);
                    processData(req.getType(), exsData, result);
                    changeProgress("Proses menyimpan data " + process, (i + 1));
                }

                progressbar.setMaximum(4);
                changeProgress("Sinkronisasi data " + process + " Selesai", index + 1);
            } else {
                changeProgress("Gagal memuat data " + process, index + 1);
            }
        } catch (SQLException e) {
            changeProgress("Proses sinkronisasi data "+process+" gagal", index + 1);
            Common.errorLog("[SQLException] Failed execute syncData "+ process, e);
        }
    }
    
    private void processData(CentralDataRequest.Type type, List<String> exsData, JSONObject data) throws SQLException{
        switch(type){
            case BILLER_PDAM:
                String biller = data.getString("biller");
                if(exsData.contains(biller)){
                    controller.updatePDAMBiller(data);
                }else{
                    controller.insertPDAMBiller(data);
                }
                break;
            case DENOM_PREPAID:
                String denom = data.get("denom").toString();
                if(exsData.contains(denom)){
                    controller.updatePrepaidDenom(data);
                }else{
                    controller.insertPrepaidDenom(data);
                }
                break;
            case BILLER_MP:
                biller = data.getString("biller");
                if(exsData.contains(biller)){
                    controller.updateMPBiller(data);
                }else{
                    controller.insertMPBiller(data);
                }
                break;
            case PRODUK_VOUCHER:
                controller.insertVoucjerProduk(exsData, data);
                break;
            default:
                break;
        }
    }
    
    private void readLastSync(){
        try {
            txt_lastsync.setText("-");
            File myObj = new File("logs/sync.log");
            
            if(!myObj.exists()){
                myObj.createNewFile();
            }
            
            try (Scanner myReader = new Scanner(myObj)) {
                if (myReader.hasNextLine()) {
                    String data = myReader.nextLine();
                    txt_lastsync.setText(data);
                }
            }
        } catch (Exception e) {
        }
    }
    
    private void writeLastSync(){
        try {
            try (FileWriter myWriter = new FileWriter("logs/sync.log")) {
                myWriter.write(Common.getCurentDate());
            }
        } catch (Exception e) {
        }
    }
   

}
