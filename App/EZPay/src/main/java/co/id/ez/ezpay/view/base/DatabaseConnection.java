/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package co.id.ez.ezpay.view.base;

import co.id.ez.database.DBService;
import co.id.ez.ezpay.MainApps;
import co.id.ez.ezpay.abstracts.AbstractModule;
import co.id.ez.ezpay.app.Common;
import co.id.ez.ezpay.controller.AppController;
import co.id.ez.ezpay.enums.util.Icons;
import co.id.ez.system.core.config.ConfigService;
import co.id.ez.system.core.config.Configuration;
import co.id.ez.system.core.etc.EncryptionService;
import co.id.ez.system.core.log.LogService;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author RCS
 */
public class DatabaseConnection extends javax.swing.JFrame {

    private final String env_key = "enmcH556poKyPwxx";
    private final AppController contrroller = new AppController();

    /**
     * Creates new form FormLogin
     */
    public DatabaseConnection() {
        initComponents();
        intForm();
    }

    private void intForm() {
        this.setTitle(System.getProperty("app-name") +" "+ System.getProperty("app-version"));
        ImageIcon img = Icons.ASSETS_ICONS.get();
        this.setIconImage(img.getImage());
        setLocationRelativeTo(null);
        lbl_logo.setIcon(Icons.ASSETS_UNIVERS.get());
        lbl_logo.setText(System.getProperty("app-name"));
        lbl_version.setText(System.getProperty("app-version"));
        btn_batal.setIcon(Icons.LARGE_CANCEL.get());
        btn_simpan.setIcon(Icons.LARGE_SAVE.get());
        Common.clearTexts(txt_dbname, txt_ip, txt_password, txt_port, txt_user);
        txt_ip.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        customPanel1 = new co.id.ez.ezpay.util.swings.CustomPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lbl_logo = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        defaultPanel1 = new co.id.ez.ezpay.util.swings.DefaultPanel();
        jLabel3 = new javax.swing.JLabel();
        txt_ip = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        btn_batal = new javax.swing.JButton();
        btn_simpan = new javax.swing.JButton();
        txt_password = new javax.swing.JPasswordField();
        jLabel6 = new javax.swing.JLabel();
        txt_dbname = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txt_port = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txt_user = new javax.swing.JTextField();
        lbl_version = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.CardLayout());

        customPanel1.setLayout(new java.awt.BorderLayout());

        jPanel1.setOpaque(false);
        jPanel1.setPreferredSize(new java.awt.Dimension(100, 100));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Database");
        jPanel1.add(jLabel1, java.awt.BorderLayout.PAGE_END);

        lbl_logo.setFont(new java.awt.Font("Matura MT Script Capitals", 0, 20)); // NOI18N
        lbl_logo.setForeground(new java.awt.Color(255, 255, 255));
        lbl_logo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_logo.setText("EZ Payment");
        lbl_logo.setPreferredSize(new java.awt.Dimension(100, 28));
        jPanel1.add(lbl_logo, java.awt.BorderLayout.CENTER);

        customPanel1.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setOpaque(false);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Ip database");

        txt_ip.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Password");

        btn_batal.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btn_batal.setText("Batal");
        btn_batal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_batal.setPreferredSize(new java.awt.Dimension(100, 25));
        btn_batal.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btn_batal.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_batal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_batalActionPerformed(evt);
            }
        });

        btn_simpan.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btn_simpan.setText("Simpan");
        btn_simpan.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_simpan.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_simpan.setPreferredSize(new java.awt.Dimension(100, 25));
        btn_simpan.setVerifyInputWhenFocusTarget(false);
        btn_simpan.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btn_simpan.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_simpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_simpanActionPerformed(evt);
            }
        });

        txt_password.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        txt_password.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                txt_passwordComponentShown(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Nama Database");

        txt_dbname.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Port");

        txt_port.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("User");

        txt_user.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N

        javax.swing.GroupLayout defaultPanel1Layout = new javax.swing.GroupLayout(defaultPanel1);
        defaultPanel1.setLayout(defaultPanel1Layout);
        defaultPanel1Layout.setHorizontalGroup(
            defaultPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(defaultPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(defaultPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, defaultPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_simpan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_batal, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txt_password)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txt_dbname)
                    .addGroup(defaultPanel1Layout.createSequentialGroup()
                        .addGroup(defaultPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                            .addComponent(txt_ip, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(defaultPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txt_port)))
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txt_user))
                .addContainerGap())
        );
        defaultPanel1Layout.setVerticalGroup(
            defaultPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(defaultPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(defaultPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(defaultPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_ip, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_port, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_dbname, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_user, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_password, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(defaultPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_simpan, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                    .addComponent(btn_batal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        lbl_version.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lbl_version.setForeground(new java.awt.Color(255, 255, 255));
        lbl_version.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_version.setText("Version 1.0.0");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(defaultPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lbl_version, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(defaultPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_version)
                .addContainerGap())
        );

        customPanel1.add(jPanel2, java.awt.BorderLayout.CENTER);

        getContentPane().add(customPanel1, "card2");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        // TODO add your handling code here:
        MainApps.instance.setLookAndFeel(false);
    }//GEN-LAST:event_formComponentHidden

    private void btn_batalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_batalActionPerformed
        // TODO add your handling code here:
        int opt = Common.showConfirmMessage("Anda ingin keluar dari aplikasi?", this);
        if (opt == 0) {
            System.exit(0);
        }
    }//GEN-LAST:event_btn_batalActionPerformed

    private void btn_simpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_simpanActionPerformed
        // TODO add your handling code here:
        int opt = Common.showConfirmMessage("Simpan konfigurasi database?", this);
        if (opt == 0) {
            if (save()) {
                Common.showInfoMessage("Konfigurasi database berhasil dismpan", this);
                this.dispose();
                try {
                    MainApps.instance.setLookAndFeel(false);
                    new SplashScreen().setVisible(true);
                } catch (Exception ex) {
                    Common.errorLog("[Exception] Failed start application", ex);
                    Common.showMessage("Fatal Error!\n" + ex.getMessage(), JOptionPane.ERROR_MESSAGE);
                    System.exit(0);
                }
            }
        }
    }//GEN-LAST:event_btn_simpanActionPerformed

    private void txt_passwordComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_txt_passwordComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_passwordComponentShown

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        readSettingDatabase();
        readCurentSetting();
    }//GEN-LAST:event_formComponentShown

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        btn_batalActionPerformed(null);
    }//GEN-LAST:event_formWindowClosing

    private void readSettingDatabase() {
        try {

            File envFolder = new File("conf");

            if (!envFolder.exists()) {
                envFolder.mkdir();
            }

            File dbConfig = new File("conf/db.cfg");

            if (!dbConfig.exists()) {
                dbConfig.createNewFile();
            }

            ConfigService.reload(dbConfig);
        } catch (IOException e) {
            LogService.getInstance(this)
                    .config().withCause(e)
                    .log("[IOException | NumberFormatException] Error load setting struk", true);
        }
    }

    private void readCurentSetting() {
        try {
            Common.clearText(txt_dbname, txt_ip, txt_password, txt_port, txt_user);
            List<Configuration> connections = ConfigService.getInstance()
                    .getConfigList("ezsystem.database.connections", new ArrayList());

            connections.forEach(conn -> {
                String name = conn.getString("name");
                if (name.equals(AbstractModule.dbName)) {
                    String host = conn.getString("host");
                    String port = conn.getString("port");
                    String username = conn.getString("username");
                    String password = conn.getString("password");
                    txt_ip.setText(host);
                    txt_port.setText(port);
                    txt_user.setText(username);
                    txt_password.setText(password);
                }
            });
        } catch (Exception e) {
            Common.errorLog("[Exception] Error read curent connetion", e);
        }
    }

    private boolean preCheckDBCondition() throws SQLException {
        String tUrl = "jdbc:mysql://" + txt_ip.getText() + ":" + txt_port.getText() + "?useUnicode=true&characterEncoding=UTF-8";
        String tName = "Test" + UUID.randomUUID().toString().replace("-", "");
        DBService.createSingleDBConfig(tName, tUrl, txt_user.getText(), txt_password.getText());

        if (!contrroller.isDBExist(tName, txt_dbname.getText())) {
            contrroller.createNewDB(tName, txt_dbname.getText());
        }
//        else {
//            if (contrroller.isDBNeedReset(tName, txt_dbname.getText())) {
//                int opt = Common.showConfirmMessage("Database yang anda pilih bukan database kosong!"
//                        + "\nSistem akan melakukan reset pada database anda,"
//                        + "\n"
//                        + "\nLanjutkan dan reset database?", this);
//                if (opt == 0) {
//                    contrroller.resetDB(tName, txt_dbname.getText());
//                } else {
//                    return false;
//                }
//            }
//        }

        return true;
    }

    private boolean save() {
        try {
            if (preCheckDBCondition()) {
                try (BufferedWriter writer = new BufferedWriter(new FileWriter("conf/db.cfg"))) {
                    writer.write("-------------------------");
                    writer.newLine();

                    writer.write("$target= ezsystem.database");
                    writer.newLine();

                    writer.write("@type= configlist");
                    writer.newLine();

                    writer.write("@name= connections");
                    writer.newLine();

                    writer.write("@enc= true");
                    writer.newLine();

                    writer.write("-------------------------");
                    writer.newLine();

                    String name = EncryptionService
                            .encryptor()
                            .Base64Encrypt(
                                    EncryptionService
                                            .encryptor().encrypt(
                                                    "payment",
                                                    env_key
                                            )
                            );
                    writer.write("name= " + name.replace("=", "<>"));
                    writer.newLine();

                    String url = EncryptionService
                            .encryptor()
                            .Base64Encrypt(
                                    EncryptionService
                                            .encryptor().encrypt(
                                                    "jdbc:mysql://" + txt_ip.getText() + ":" + txt_port.getText() + "/" + txt_dbname.getText() + "?useUnicode=true&characterEncoding=UTF-8",
                                                    env_key
                                            )
                            );
                    writer.write("url= " + url.replace("=", "<>"));
                    writer.newLine();

                    String ip = EncryptionService
                            .encryptor()
                            .Base64Encrypt(
                                    EncryptionService
                                            .encryptor().encrypt(
                                                    txt_ip.getText(),
                                                    env_key
                                            )
                            );
                    writer.write("host= " + ip.replace("=", "<>"));
                    writer.newLine();

                    String port = EncryptionService
                            .encryptor()
                            .Base64Encrypt(
                                    EncryptionService
                                            .encryptor().encrypt(
                                                    txt_port.getText(),
                                                    env_key
                                            )
                            );
                    writer.write("port= " + port.replace("=", "<>"));
                    writer.newLine();

                    String dbname = EncryptionService
                            .encryptor()
                            .Base64Encrypt(
                                    EncryptionService
                                            .encryptor().encrypt(
                                                    txt_dbname.getText(),
                                                    env_key
                                            )
                            );
                    writer.write("dbname= " + dbname.replace("=", "<>"));
                    writer.newLine();

                    String user = EncryptionService
                            .encryptor()
                            .Base64Encrypt(
                                    EncryptionService
                                            .encryptor().encrypt(
                                                    txt_user.getText(),
                                                    env_key
                                            )
                            );
                    writer.write("username= " + user.replace("=", "<>"));
                    writer.newLine();

                    String pass = EncryptionService
                            .encryptor()
                            .Base64Encrypt(
                                    EncryptionService
                                            .encryptor().encrypt(
                                                    txt_password.getText(),
                                                    env_key
                                            )
                            );
                    writer.write("password= " + pass.replace("=", "<>"));
                    writer.newLine();

                    writer.write("-------------------------");
                    writer.newLine();

                    writer.flush();
                    writer.close();
                }
                return true;
            } else {
                return false;
            }
        } catch (IOException e) {
            LogService.getInstance(this)
                    .config().withCause(e)
                    .log("[IOException] Error save setting struk", true);
            Common.showErrorMessage("Gagal menyimpan konfigurasi DB\n" + e.getMessage(), this);
        } catch (SQLException ex) {
            LogService.getInstance(this)
                    .config().withCause(ex)
                    .log("[SQLException] Error creating database", true);
            Common.showErrorMessage("Gagal membuat database\n" + ex.getMessage(), this);
        }

        return false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_batal;
    private javax.swing.JButton btn_simpan;
    private co.id.ez.ezpay.util.swings.CustomPanel customPanel1;
    private co.id.ez.ezpay.util.swings.DefaultPanel defaultPanel1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lbl_logo;
    private javax.swing.JLabel lbl_version;
    private javax.swing.JTextField txt_dbname;
    private javax.swing.JTextField txt_ip;
    private javax.swing.JPasswordField txt_password;
    private javax.swing.JTextField txt_port;
    private javax.swing.JTextField txt_user;
    // End of variables declaration//GEN-END:variables
}
