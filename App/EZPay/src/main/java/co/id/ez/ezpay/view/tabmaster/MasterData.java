/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package co.id.ez.ezpay.view.tabmaster;

import co.id.ez.ezpay.abstracts.AbstractViewLaporan;
import co.id.ez.ezpay.app.Common;
import co.id.ez.ezpay.app.ProfileManager;
import co.id.ez.ezpay.controller.MasterDataContoller;
import co.id.ez.ezpay.enums.MasterDataType;
import co.id.ez.ezpay.enums.MessageType;
import co.id.ez.ezpay.interfaces.DataTable;
import co.id.ez.ezpay.model.data.master.PrepaidDenomListModel;
import co.id.ez.ezpay.model.data.master.VoucherProductModel;
import co.id.ez.ezpay.util.swings.table.TableActionEvent;
import co.id.ez.ezpay.view.PriceInput;
import co.id.ez.ezpay.view.form.SyncronizeView;
import com.json.JSONObject;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.LinkedList;

/**
 *
 * @author Lutfi
 */
public class MasterData extends AbstractViewLaporan {

    private final MasterDataType masterDataType;
    public final MasterDataContoller masterController = new MasterDataContoller();
    private final SyncronizeView syncView;
    private int rowEdited = -1;

    /**
     * Creates new form MasterData
     *
     * @param masterData
     */
    public MasterData(MasterDataType masterData) {
        this(masterData, null);
    }

    public MasterData(MasterDataType masterData, SyncronizeView syncView) {
        this(masterData, syncView, false);
    }

    public MasterData(MasterDataType masterData, SyncronizeView syncView, boolean isPrintable) {
        super(masterData.getTableHeader(), true, isPrintable);
        this.masterDataType = masterData;
        this.syncView = syncView;
        initComponents();
        initForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelData = new javax.swing.JPanel();
        panelchange = new javax.swing.JPanel();
        btn_estimasi = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        panelData.setLayout(new java.awt.CardLayout());
        add(panelData, java.awt.BorderLayout.CENTER);

        panelchange.setPreferredSize(new java.awt.Dimension(100, 40));

        btn_estimasi.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btn_estimasi.setText("Estimasi");
        btn_estimasi.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_estimasi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_estimasiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelchangeLayout = new javax.swing.GroupLayout(panelchange);
        panelchange.setLayout(panelchangeLayout);
        panelchangeLayout.setHorizontalGroup(
            panelchangeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelchangeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_estimasi)
                .addContainerGap(312, Short.MAX_VALUE))
        );
        panelchangeLayout.setVerticalGroup(
            panelchangeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelchangeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_estimasi, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(panelchange, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_estimasiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_estimasiActionPerformed
        // TODO add your handling code here:
        int opt = Common.showConfirmMessage("Anda yakin melakukan estimasi harga?"
                + "\nData mungkin akan berubah setelah estimasi dilakukan", this);
        if (opt == 0) {
            estimatePrice();
        }
    }//GEN-LAST:event_btn_estimasiActionPerformed

    @Override
    public void loadData(String search) {
        try {
            mChaceStringString = search;
            viewTableData.clearTable();
            LinkedList<DataTable> data = getDataTable(search);
            loadDataToTables(data, getTableActionEvent());
        } catch (SQLException e) {
            Common.showErrorMessage(MessageType.SYSTEM_ERROR, this);
            Common.errorLog("[SQLException] Failed load data " + masterDataType.getTitle(), e);
        }
    }

    @Override
    public void loadReport() {
        if (masterDataType.getReportName() != null) {
            HashMap maps = ProfileManager.instance().getProfileMaps();
            String tQuery;
            switch (masterDataType) {
                case VoucherProduct:
                    tQuery = masterController.getQueryVoucherProductList(mChaceStringString);
                    break;
                case PrepaidDenom:
                    tQuery = masterController.getQueryPrepaidDenomList(mChaceStringString);
                    break;
                default:
                    tQuery = null;
            }
            previewReport(masterDataType.getReportName(), maps, tQuery);
        }
    }

    private TableActionEvent getTableActionEvent() {
        TableActionEvent event = new TableActionEvent() {
            @Override
            public void onView(int row) {
            }

            @Override
            public void onCheckStatus(int row) {
            }

            @Override
            public boolean canView() {
                return false;
            }

            @Override
            public boolean canCheck() {
                return false;
            }

            @Override
            public boolean canReprint() {
                return false;
            }

            @Override
            public void onReprint(int row) {
            }

            @Override
            public boolean canEdit() {
                return masterDataType.isIsPricable();
            }

            @Override
            public void onEdit(int row) {
                int opt = Common.showConfirmMessage("Rubah harga jual?", syncView);
                if (opt == 0) {
                    rowEdited = row;
                    DataTable model = viewTableData.getTableModel().getValueAt(row);
                    PriceInput frm = new PriceInput(Common.getHome(), true, masterDataType, model, MasterData.this);
                    frm.setVisible(true);
                }
            }
        };

        return event;
    }

    public void changePrice(Object value) {
        loadData();
    }

    @Override
    public final void initForm() {
        loadViewTable(panelData);
        Common.setVisibility(masterDataType.isIsPricable(), panelchange);
        Common.setOpaqueComponent(false, panelchange, panelData);
        mChaceStringString = "";
        loadData();
    }

    @Override
    public void resetForm() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void loadData() {
        loadData("");
    }

    private LinkedList<DataTable> getDataTable(String search) throws SQLException {
        LinkedList<DataTable> result = null;
        switch (masterDataType) {
            case MultiPaymentBiller:
                result = masterController.loadMultiPaymentBiller(search);
                break;
            case VoucherProduct:
                result = masterController.loadVoucherProductList(search);
                break;
            case PDAMBiller:
                result = masterController.loadPDAMBillerList(search);
                break;
            case PrepaidDenom:
                result = masterController.loadPrepaidDenomList(search);
                break;
        }

        return result;
    }

    private void estimatePrice() {
        new Thread(() -> {
            try {
                syncView.showProgressbar(true);
                syncView.setMaxProgressbar(2);
                syncView.changeProgress("Persiapan menghitung estimasi harga jual", 0);
                syncView.changeProgress("Cek konfigurasi margin sales ", 1);
                JSONObject data = masterController.getMarginSales();
                syncView.changeProgress("Membaca konfigurasi margin sales ", 2);

                if (data != null) {
                    syncView.setMaxProgressbar(2);
                    syncView.changeProgress("Persiapan mencari data produk", 0);
                    syncView.changeProgress("Cek data master data ", 1);
                    LinkedList<DataTable> dataMaster = getDataTable("");
                    syncView.changeProgress("Membaca master data", 2);

                    estimatePriceSales(dataMaster, data);
                } else {
                    Common.showWarningMessage("Konfigurasi margin sales tidak ditemukan!", this);
                    syncView.setMaxProgressbar(0);
                    syncView.changeProgress("Gagal menghitung estimasi", 0);
                    syncView.showProgressbar(false);
                }

            } catch (SQLException e) {
                Common.errorLog("[JSONException | SQLException] Gagal melakukan estimasi harga voucher", e);
                syncView.showProgressbar(false);
                Common.showErrorMessage("Gagal mengestimasi harga jual produk voucher", this);
            } catch (Exception e) {
                Common.errorLog("[Exception] Gagal melakukan estimasi harga voucher", e);
                syncView.showProgressbar(false);
                Common.showErrorMessage("Gagal mengestimasi harga jual produk voucher", this);
            }
        }).start();
    }

    private void estimatePriceSales(LinkedList<DataTable> data, JSONObject estimateConfig) throws SQLException {
        switch (masterDataType) {
            case VoucherProduct:
                estimateVoucherPrice(data, estimateConfig);
                break;
            case PrepaidDenom:
                estimatePrepaidPrice(data, estimateConfig);
                break;
            default:
                break;
        }

        syncView.setMaxProgressbar(2);
        syncView.changeProgress("Menampilkan ulang data", 1);
        loadData();
        syncView.changeProgress("Selesai menampilkan ulang data", 2);
        syncView.showProgressbar(false);
    }

    private void estimateVoucherPrice(LinkedList<DataTable> data, JSONObject estimateConfig) throws SQLException {
        String type = estimateConfig.getString("type");
        BigDecimal value = new BigDecimal(estimateConfig.get("value").toString());
        String round_type = estimateConfig.getString("round_type");
        BigDecimal margin_min = new BigDecimal(estimateConfig.get("margin_min").toString());
        BigDecimal margin_max = new BigDecimal(estimateConfig.get("margin_max").toString());

        syncView.changeProgress("Persiapan mengestimasi harga jual", 0);
        syncView.setMaxProgressbar(6);
        for (DataTable dataTable : data) {
            VoucherProductModel model = (VoucherProductModel) dataTable;
            syncView.changeProgress("Estimasi harga jual: " + model.getVoucherid(), 0);

            BigDecimal tPrice = model.getHarga();
            BigDecimal tPriceSales, tTmpValue = value;

            syncView.changeProgress("Estimasi margin: " + model.getVoucherid(), 1);
            if (type.equals("1")) {
                tTmpValue = tPrice.multiply(value).divide(BigDecimal.valueOf(100));
            }

            tPriceSales = tPrice.add(tTmpValue);

            BigDecimal tMargin = tPriceSales.subtract(tPrice);

            syncView.changeProgress("Validasi minimum margin: " + model.getVoucherid(), 2);
            if (tMargin.compareTo(margin_min) <= 0) {
                tPriceSales = tPriceSales.add(margin_min);
            }

            syncView.changeProgress("Validasi maximum margin: " + model.getVoucherid(), 3);
            if (tMargin.compareTo(margin_max) > 0) {
                tPriceSales = tPrice.add(margin_max);
            }

            syncView.changeProgress("Pembulatan margin: " + model.getVoucherid(), 4);
            if (round_type.equals("1")) {
                tPriceSales = cekPembulatan(tPriceSales, true);
            } else {
                tPriceSales = cekPembulatan(tPriceSales, false);
            }

            syncView.changeProgress("Update data harga jual: " + model.getVoucherid(), 5);
            masterController.updateVoucherPriceSales(model.getVoucherid(), tPriceSales);
            syncView.changeProgress("Selesai: " + model.getVoucherid(), 6);
        }
        Common.showInfoMessage("Estimasi harga voucher berhasil", this);
    }

    private BigDecimal cekPembulatan(BigDecimal pSalePrice, boolean isUp) {
        pSalePrice = pSalePrice.setScale(0, RoundingMode.HALF_DOWN);
        double tVal = 500;
        double tMod = pSalePrice.doubleValue() % tVal;

        if (tMod > 0) {
            if (isUp) {
                pSalePrice = pSalePrice.subtract(BigDecimal.valueOf(tMod)).add(BigDecimal.valueOf(tVal));
            } else {
                pSalePrice = pSalePrice.subtract(BigDecimal.valueOf(tMod));
            }
        }

        return pSalePrice;
    }

    private void estimatePrepaidPrice(LinkedList<DataTable> data, JSONObject estimateConfig) throws SQLException {
        String type = estimateConfig.getString("type");
        BigDecimal value = new BigDecimal(estimateConfig.get("value").toString());
        String round_type = estimateConfig.getString("round_type");
        BigDecimal margin_min = new BigDecimal(estimateConfig.get("margin_min").toString());
        BigDecimal margin_max = new BigDecimal(estimateConfig.get("margin_max").toString());

        syncView.changeProgress("Persiapan mengestimasi harga jual", 0);
        syncView.setMaxProgressbar(6);
        for (DataTable dataTable : data) {
            PrepaidDenomListModel model = (PrepaidDenomListModel) dataTable;
            syncView.changeProgress("Estimasi harga jual: " + model.getDeskripsi(), 0);

            BigDecimal tPrice = model.getDenom();
            BigDecimal tPriceSales, tTmpValue = value;

            syncView.changeProgress("Estimasi margin: " + model.getDeskripsi(), 1);
            if (type.equals("1")) {
                tTmpValue = tPrice.multiply(value).divide(BigDecimal.valueOf(100));
            }

            tPriceSales = tPrice.add(tTmpValue);

            BigDecimal tMargin = tPriceSales.subtract(tPrice);

            syncView.changeProgress("Validasi minimum margin: " + model.getDeskripsi(), 2);
            if (tMargin.compareTo(margin_min) <= 0) {
                tPriceSales = tPriceSales.add(margin_min);
            }

            syncView.changeProgress("Validasi maximum margin: " + model.getDeskripsi(), 3);
            if (tMargin.compareTo(margin_max) > 0) {
                tPriceSales = tPrice.add(margin_max);
            }

            syncView.changeProgress("Pembulatan margin: " + model.getDeskripsi(), 4);
            if (round_type.equals("1")) {
                tPriceSales = cekPembulatan(tPriceSales, true);
            } else {
                tPriceSales = cekPembulatan(tPriceSales, false);
            }

            syncView.changeProgress("Update data harga jual: " + model.getDeskripsi(), 5);
            masterController.updatePrepaidPriceSales(model.getDenom().toPlainString(), tPriceSales);
            syncView.changeProgress("Selesai: " + model.getDeskripsi(), 6);
        }
        Common.showInfoMessage("Estimasi harga prepaid berhasil", this);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_estimasi;
    private javax.swing.JPanel panelData;
    private javax.swing.JPanel panelchange;
    // End of variables declaration//GEN-END:variables
}
