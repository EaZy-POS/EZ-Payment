/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package co.id.ez.ezpay.view.settings;

import co.id.ez.database.DBService;
import co.id.ez.ezpay.abstracts.AbstractView;
import co.id.ez.ezpay.app.Common;
import co.id.ez.ezpay.controller.AppController;
import co.id.ez.ezpay.enums.util.Icons;
import co.id.ez.ezpay.util.swings.input.InputTextType;
import co.id.ez.system.core.config.ConfigService;
import co.id.ez.system.core.config.Configuration;
import co.id.ez.system.core.etc.EncryptionService;
import co.id.ez.system.core.log.LogService;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JList;

/**
 *
 * @author RCS
 */
public class IntegrationView extends AbstractView {

    private final String env_key = "enmcH556poKyPwxx";
    private final AppController appcontroller = new AppController();
    private final DefaultListModel<String> data_field_model = new DefaultListModel<>();
    private final DefaultListModel<String> target_field_model = new DefaultListModel<>();
    private final DefaultListModel<String> result_model = new DefaultListModel<>();
    private boolean isConnected;
    private final IntegrationConfig config = new IntegrationConfig();

    /**
     * Creates new form SyncronizeView
     */
    public IntegrationView() {
        initComponents();
        initForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        panelAdmin = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lbl_x = new javax.swing.JLabel();
        cmb_tipe = new javax.swing.JComboBox<>();
        lbl_x1 = new javax.swing.JLabel();
        rd_mysql = new javax.swing.JRadioButton();
        lbl_x2 = new javax.swing.JLabel();
        txt_host = new javax.swing.JTextField();
        lbl_x3 = new javax.swing.JLabel();
        txt_port = new javax.swing.JTextField();
        lbl_x4 = new javax.swing.JLabel();
        txt_user = new javax.swing.JTextField();
        lbl_x5 = new javax.swing.JLabel();
        btn_cek_koneksi = new javax.swing.JButton();
        txt_password = new javax.swing.JPasswordField();
        lbl_status = new javax.swing.JLabel();
        lbl_x10 = new javax.swing.JLabel();
        txt_dbname = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        btn_simpan = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        lbl_x6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        list_data_field = new javax.swing.JList<>();
        lbl_x7 = new javax.swing.JLabel();
        lbl_x8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        list_target_field = new javax.swing.JList<>();
        jPanel5 = new javax.swing.JPanel();
        check_default_value = new javax.swing.JCheckBox();
        txt_default_value = new javax.swing.JTextField();
        cek_sql_syntax = new javax.swing.JCheckBox();
        btn_add = new javax.swing.JButton();
        btn_remove = new javax.swing.JButton();
        btn_test = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        list_result = new javax.swing.JList<>();
        lbl_x9 = new javax.swing.JLabel();
        cmb_table = new javax.swing.JComboBox<>();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        setLayout(new java.awt.CardLayout());

        jPanel1.setLayout(new java.awt.CardLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pengaturan Integrasi", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 13), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel2.setPreferredSize(new java.awt.Dimension(580, 128));

        lbl_x.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lbl_x.setForeground(new java.awt.Color(255, 255, 255));
        lbl_x.setText("Tipe Integrasi");
        lbl_x.setPreferredSize(new java.awt.Dimension(74, 25));

        cmb_tipe.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        lbl_x1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lbl_x1.setForeground(new java.awt.Color(255, 255, 255));
        lbl_x1.setText("Jenis Database");
        lbl_x1.setPreferredSize(new java.awt.Dimension(74, 25));

        buttonGroup1.add(rd_mysql);
        rd_mysql.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        rd_mysql.setForeground(new java.awt.Color(255, 255, 255));
        rd_mysql.setText("MySQL");

        lbl_x2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lbl_x2.setForeground(new java.awt.Color(255, 255, 255));
        lbl_x2.setText("Host");
        lbl_x2.setPreferredSize(new java.awt.Dimension(74, 25));

        txt_host.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        lbl_x3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lbl_x3.setForeground(new java.awt.Color(255, 255, 255));
        lbl_x3.setText("Port");
        lbl_x3.setPreferredSize(new java.awt.Dimension(74, 25));

        txt_port.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        lbl_x4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lbl_x4.setForeground(new java.awt.Color(255, 255, 255));
        lbl_x4.setText("User");
        lbl_x4.setPreferredSize(new java.awt.Dimension(74, 25));

        txt_user.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        lbl_x5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lbl_x5.setForeground(new java.awt.Color(255, 255, 255));
        lbl_x5.setText("Password");
        lbl_x5.setPreferredSize(new java.awt.Dimension(74, 25));

        btn_cek_koneksi.setText("Cek Koneksi");
        btn_cek_koneksi.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_cek_koneksi.setPreferredSize(new java.awt.Dimension(72, 25));
        btn_cek_koneksi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cek_koneksiActionPerformed(evt);
            }
        });

        txt_password.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_passwordKeyTyped(evt);
            }
        });

        lbl_status.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lbl_status.setForeground(new java.awt.Color(255, 255, 255));
        lbl_status.setPreferredSize(new java.awt.Dimension(74, 25));

        lbl_x10.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lbl_x10.setForeground(new java.awt.Color(255, 255, 255));
        lbl_x10.setText("Nama Database");
        lbl_x10.setPreferredSize(new java.awt.Dimension(74, 25));

        txt_dbname.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lbl_x4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbl_x5, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txt_password, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_cek_koneksi, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_status, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txt_user, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                    .addComponent(lbl_x10, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txt_dbname))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(lbl_x2, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txt_host, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lbl_x3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txt_port, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(lbl_x1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(rd_mysql)
                                    .addGap(253, 253, 253))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(lbl_x, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cmb_tipe, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_x, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb_tipe, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbl_x1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rd_mysql, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_x2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txt_host, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_x3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txt_port, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_x10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txt_dbname, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_x4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txt_user, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbl_x5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_cek_koneksi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txt_password, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lbl_status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        btn_simpan.setText("Simpan");
        btn_simpan.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_simpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_simpanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_simpan, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_simpan, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Target Integrasi", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel4.setForeground(new java.awt.Color(255, 255, 255));
        jPanel4.setOpaque(false);

        lbl_x6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lbl_x6.setForeground(new java.awt.Color(255, 255, 255));
        lbl_x6.setText("Nama Tabel");
        lbl_x6.setPreferredSize(new java.awt.Dimension(74, 25));

        list_data_field.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        list_data_field.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        list_data_field.setMaximumSize(new java.awt.Dimension(200, 95));
        list_data_field.setMinimumSize(new java.awt.Dimension(200, 95));
        list_data_field.setPreferredSize(new java.awt.Dimension(200, 95));
        jScrollPane1.setViewportView(list_data_field);

        lbl_x7.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lbl_x7.setForeground(new java.awt.Color(255, 255, 255));
        lbl_x7.setText("Data Field");
        lbl_x7.setPreferredSize(new java.awt.Dimension(74, 25));

        lbl_x8.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lbl_x8.setForeground(new java.awt.Color(255, 255, 255));
        lbl_x8.setText("Target Field");
        lbl_x8.setPreferredSize(new java.awt.Dimension(74, 25));

        list_target_field.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        list_target_field.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        list_target_field.setMaximumSize(new java.awt.Dimension(200, 95));
        list_target_field.setMinimumSize(new java.awt.Dimension(200, 95));
        list_target_field.setPreferredSize(new java.awt.Dimension(200, 95));
        list_target_field.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                list_target_fieldMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(list_target_field);

        jPanel5.setOpaque(false);

        check_default_value.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        check_default_value.setForeground(new java.awt.Color(255, 255, 255));
        check_default_value.setText("Default Value");

        txt_default_value.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txt_default_value.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        cek_sql_syntax.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        cek_sql_syntax.setForeground(new java.awt.Color(255, 255, 255));
        cek_sql_syntax.setText("SQL Syntax");

        btn_add.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btn_add.setText(">>");
        btn_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addActionPerformed(evt);
            }
        });

        btn_remove.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btn_remove.setText("<<");
        btn_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_removeActionPerformed(evt);
            }
        });

        btn_test.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btn_test.setText("Tes Integrasi");
        btn_test.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_testActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(check_default_value, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(cek_sql_syntax, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btn_add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btn_remove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btn_test, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(txt_default_value, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(check_default_value)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_default_value, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cek_sql_syntax)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_add)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_remove)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_test))
        );

        list_result.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        list_result.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(list_result);

        lbl_x9.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lbl_x9.setForeground(new java.awt.Color(255, 255, 255));
        lbl_x9.setText("Result");
        lbl_x9.setPreferredSize(new java.awt.Dimension(74, 25));

        cmb_table.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        cmb_table.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_tableItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(lbl_x6, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmb_table, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 480, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(lbl_x7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jScrollPane2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lbl_x8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addComponent(lbl_x9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_x6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb_table, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_x7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_x8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(lbl_x9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3)))
                .addContainerGap())
        );

        javax.swing.GroupLayout panelAdminLayout = new javax.swing.GroupLayout(panelAdmin);
        panelAdmin.setLayout(panelAdminLayout);
        panelAdminLayout.setHorizontalGroup(
            panelAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAdminLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 981, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelAdminLayout.setVerticalGroup(
            panelAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAdminLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(61, Short.MAX_VALUE))
        );

        jPanel1.add(panelAdmin, "card3");

        add(jPanel1, "card3");
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentShown

    private void btn_simpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_simpanActionPerformed
        // TODO add your handling code here:
        int opt = Common.showConfirmMessage("Simpan pengaturan?", this);
        if (opt == 0) {
        }
    }//GEN-LAST:event_btn_simpanActionPerformed

    private void btn_cek_koneksiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cek_koneksiActionPerformed
        // TODO add your handling code here:
        if (validateForm()) {
            saveConfiguration();
            cekKoneksi();
            activateTarget();
        }
    }//GEN-LAST:event_btn_cek_koneksiActionPerformed

    @Override
    public boolean validateForm() {
        if (txt_host.getText().length() == 0) {
            Common.showWarningMessage("Mohon isi host dengan benar!", this);
            txt_host.requestFocus();
            return false;
        }

        if (txt_port.getText().length() == 0) {
            Common.showWarningMessage("Mohon isi port dengan benar!", this);
            txt_port.requestFocus();
            return false;
        }

        if (txt_dbname.getText().length() == 0) {
            Common.showWarningMessage("Mohon isi nama database dengan benar!", this);
            txt_dbname.requestFocus();
            return false;
        }

        if (txt_user.getText().length() == 0) {
            Common.showWarningMessage("Mohon isi user dengan benar!", this);
            txt_user.requestFocus();
            return false;
        }

        if (txt_password.getText().length() == 0) {
            Common.showWarningMessage("Mohon isi password dengan benar!", this);
            txt_password.requestFocus();
            return false;
        }

        return true;
    }

    private void txt_passwordKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_passwordKeyTyped
        // TODO add your handling code here:
        if (txt_host.getText().length() > 0 && txt_port.getText().length() > 0
                && txt_user.getText().length() > 0 && txt_password.getText().length() > 0
                && txt_dbname.getText().length() > 0) {
            btn_cek_koneksi.setEnabled(true);
        } else {
            btn_cek_koneksi.setEnabled(false);
        }
    }//GEN-LAST:event_txt_passwordKeyTyped

    private void cmb_tableItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_tableItemStateChanged
        // TODO add your handling code here:
        if (cmb_table.getSelectedIndex() > 0) {
            if (config.getTableName() == null || !config.getTableName().equals(cmb_table.getSelectedItem())) {
                try {
                    result_model.clear();
                    list_result.setModel(result_model);
                    config.values().clear();
                    String tablename = cmb_table.getSelectedItem().toString();
                    config.setTableName(tablename);
                    List<String> field = appcontroller.getFieldTable(tablename);
                    target_field_model.clear();
                    target_field_model.addAll(field);
                    list_target_field.setModel(target_field_model);
                    addDataField();
                } catch (SQLException e) {
                    Common.errorLog("[SQLException] Failed load field from table", e);
                    Common.showErrorMessage("Gagal menampilkan field table\n" + e.getMessage(), this);
                }
            }
        }
    }//GEN-LAST:event_cmb_tableItemStateChanged

    private void btn_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addActionPerformed
        // TODO add your handling code here:
        if (list_data_field.getSelectedIndex() >= 0) {
            if (list_target_field.getSelectedIndex() < 0) {
                Common.showWarningMessage("Mohon pilih target field", this);
            } else {
                String dataField = list_data_field.getSelectedValue();
                String targetField = list_target_field.getSelectedValue();
                boolean isDef = false;
                String defValue = null;
                boolean isSQLSyntax = cek_sql_syntax.isSelected();
                config.add(dataField, targetField, isDef, defValue, isSQLSyntax);
                loadResult();
                reloadList(dataField, list_data_field, data_field_model);
                reloadList(targetField, list_target_field, target_field_model);
            }
        } else {
            if (list_target_field.getSelectedIndex() >= 0) {
                String targetField = list_target_field.getSelectedValue();
                boolean isDef = check_default_value.isSelected();
                String defValue = "";
                if (isDef) {
                    defValue = txt_default_value.getText();
                }
                boolean isSQLSyntax = cek_sql_syntax.isSelected();
                config.add(targetField, targetField, isDef, defValue, isSQLSyntax);
                loadResult();
                reloadList(targetField, list_data_field, data_field_model);
                reloadList(targetField, list_target_field, target_field_model);
            }
        }
    }//GEN-LAST:event_btn_addActionPerformed

    private void list_target_fieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_list_target_fieldMouseClicked
        // TODO add your handling code here:
        if (list_data_field.getModel().getSize() == 0) {
            check_default_value.setEnabled(false);
            check_default_value.setSelected(true);
            txt_default_value.setText("");
            txt_default_value.setEditable(true);
            cek_sql_syntax.setEnabled(true);
            cek_sql_syntax.setSelected(false);
        } else {
            check_default_value.setEnabled(false);
            check_default_value.setSelected(false);
            txt_default_value.setText("");
            txt_default_value.setEditable(false);
            cek_sql_syntax.setEnabled(false);
            cek_sql_syntax.setSelected(false);
        }
    }//GEN-LAST:event_list_target_fieldMouseClicked

    private void btn_testActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_testActionPerformed
        // TODO add your handling code here:
        Common.showInfoMessage(config.toString(), this);
    }//GEN-LAST:event_btn_testActionPerformed

    private void btn_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_removeActionPerformed
        // TODO add your handling code here:
        if (list_result.getSelectedIndex() >= 0) {
            String key = list_result.getSelectedValue().split("=")[0].trim();
            IntegrationConfig.Integration confInt = config.values().get(key);
            if (confInt != null) {
                if(!confInt.isDefault()){
                    data_field_model.addElement(key);
                }
                target_field_model.addElement(confInt.getField());
                reloadList("%%novalue%%", list_data_field, data_field_model);
                reloadList("%%novalue%%", list_target_field, target_field_model);
                reloadList(list_result.getSelectedValue(), list_result, result_model);
            }
        }
    }//GEN-LAST:event_btn_removeActionPerformed

    private void loadResult() {
        result_model.clear();
        config.values().keySet().forEach(key -> {
            result_model.addElement(config.getKeyResult(key));
        });
        list_result.setModel(result_model);
    }

    private void reloadList(String value, JList targetList, DefaultListModel model) {
        model.removeElement(value);
        targetList.setModel(model);
    }

    private void activateTarget() {
        if (isConnected) {
            try {
                Common.activateComponent(true, btn_add, btn_remove, btn_simpan, btn_test, txt_default_value);
                List<String> tableList = appcontroller.getTableName();
                cmb_table.removeAll();
                cmb_table.addItem("-- Pilih Target Table --");
                tableList.forEach(name -> {
                    cmb_table.addItem(name);
                });
                cmb_table.setSelectedIndex(0);
            } catch (SQLException e) {
                Common.errorLog("[SQLException] Failed get table list", e);
                Common.showErrorMessage("Gagal menampilkan data table!\n"
                        + e.getMessage(), this);
            }
        } else {
            File configFile = new File("conf/int-connection.cfg");
            if (configFile.exists()) {
                configFile.delete();
            }
        }

    }

    private void loadTipe() {
        cmb_tipe.removeAllItems();
        cmb_tipe.addItem("Database");
        cmb_tipe.setSelectedIndex(0);
        rd_mysql.setSelected(true);
    }

    private boolean saveConfiguration() {
        try {
            try (BufferedWriter writer = new BufferedWriter(new FileWriter("conf/int-connection.cfg"))) {
                writer.write("-------------------------");
                writer.newLine();

                writer.write("$target= ezsystem.database");
                writer.newLine();

                writer.write("@type= configlist");
                writer.newLine();

                writer.write("@name= int-connections");
                writer.newLine();

                writer.write("@enc= true");
                writer.newLine();

                writer.write("-------------------------");
                writer.newLine();

                String name = EncryptionService
                        .encryptor()
                        .Base64Encrypt(
                                EncryptionService
                                        .encryptor().encrypt(
                                                "integration",
                                                env_key
                                        )
                        );
                writer.write("name= " + name.replace("=", "<>"));
                writer.newLine();

                String url = EncryptionService
                        .encryptor()
                        .Base64Encrypt(
                                EncryptionService
                                        .encryptor().encrypt(
                                                "jdbc:mysql://" + txt_host.getText() + ":" + txt_port.getText() + "/" + txt_dbname.getText() + "?useUnicode=true&characterEncoding=UTF-8",
                                                env_key
                                        )
                        );
                writer.write("url= " + url.replace("=", "<>"));
                writer.newLine();

                String ip = EncryptionService
                        .encryptor()
                        .Base64Encrypt(
                                EncryptionService
                                        .encryptor().encrypt(
                                                txt_host.getText(),
                                                env_key
                                        )
                        );
                writer.write("host= " + ip.replace("=", "<>"));
                writer.newLine();

                String port = EncryptionService
                        .encryptor()
                        .Base64Encrypt(
                                EncryptionService
                                        .encryptor().encrypt(
                                                txt_port.getText(),
                                                env_key
                                        )
                        );
                writer.write("port= " + port.replace("=", "<>"));
                writer.newLine();

                String dbname = EncryptionService
                        .encryptor()
                        .Base64Encrypt(
                                EncryptionService
                                        .encryptor().encrypt(
                                                txt_dbname.getText(),
                                                env_key
                                        )
                        );
                writer.write("dbname= " + dbname.replace("=", "<>"));
                writer.newLine();

                String user = EncryptionService
                        .encryptor()
                        .Base64Encrypt(
                                EncryptionService
                                        .encryptor().encrypt(
                                                txt_user.getText(),
                                                env_key
                                        )
                        );
                writer.write("username= " + user.replace("=", "<>"));
                writer.newLine();

                String pass = EncryptionService
                        .encryptor()
                        .Base64Encrypt(
                                EncryptionService
                                        .encryptor().encrypt(
                                                txt_password.getText(),
                                                env_key
                                        )
                        );
                writer.write("password= " + pass.replace("=", "<>"));
                writer.newLine();

                writer.write("-------------------------");
                writer.newLine();

                writer.flush();
                writer.close();
                ConfigService.reload(new File("conf/int-connection.cfg"));
                return true;
            }
        } catch (IOException e) {
            LogService.getInstance(this)
                    .config().withCause(e)
                    .log("[IOException] Error save setting struk", true);
            Common.showErrorMessage("Gagal menyimpan konfigurasi DB\n" + e.getMessage(), this);
        }

        return false;
    }

    private void readCurentConfiguration() {
        try {
            Common.clearText(txt_dbname, txt_host, txt_password, txt_port, txt_user);
            List<Configuration> connections = ConfigService.getInstance()
                    .getConfigList("ezsystem.database.int-connections", new ArrayList());

            connections.forEach(conn -> {
                String name = conn.getString("name");
                if (name.equals("integration")) {
                    String host = conn.getString("host");
                    String port = conn.getString("port");
                    String dbname = conn.getString("dbname");
                    String username = conn.getString("username");
                    String password = conn.getString("password");
                    txt_host.setText(host);
                    txt_port.setText(port);
                    txt_dbname.setText(dbname);
                    txt_user.setText(username);
                    txt_password.setText(password);
                    btn_cek_koneksi.setEnabled(true);
                    cekKoneksi(false);
                    activateTarget();
                }
            });
        } catch (Exception e) {
            Common.errorLog("[Exception] Error read curent connetion", e);
        }
    }

    private void cekKoneksi() {
        cekKoneksi(true);
    }

    private void cekKoneksi(boolean isShowError) {
        try {
            String tUrl = "jdbc:mysql://" + txt_host.getText()
                    + ":" + txt_port.getText() + "/" + txt_dbname.getText()
                    + "?useUnicode=true&characterEncoding=UTF-8";
            String tName = "integration";
            DBService.createSingleDBConfig(tName, tUrl, txt_user.getText(), txt_password.getText());

            appcontroller.integrationConnectionCek();
            lbl_status.setText("Connected");
            isConnected = true;
            if (isShowError) {
                Common.showInfoMessage("Konesi Sukses", this);
            }
        } catch (Exception e) {
            lbl_status.setText("Failed: " + e.getMessage());
            isConnected = false;
            if (isShowError) {
                Common.showErrorMessage("Konesi gagal!", this);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_add;
    private javax.swing.JButton btn_cek_koneksi;
    private javax.swing.JButton btn_remove;
    private javax.swing.JButton btn_simpan;
    private javax.swing.JButton btn_test;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JCheckBox cek_sql_syntax;
    private javax.swing.JCheckBox check_default_value;
    private javax.swing.JComboBox<String> cmb_table;
    private javax.swing.JComboBox<String> cmb_tipe;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbl_status;
    private javax.swing.JLabel lbl_x;
    private javax.swing.JLabel lbl_x1;
    private javax.swing.JLabel lbl_x10;
    private javax.swing.JLabel lbl_x2;
    private javax.swing.JLabel lbl_x3;
    private javax.swing.JLabel lbl_x4;
    private javax.swing.JLabel lbl_x5;
    private javax.swing.JLabel lbl_x6;
    private javax.swing.JLabel lbl_x7;
    private javax.swing.JLabel lbl_x8;
    private javax.swing.JLabel lbl_x9;
    private javax.swing.JList<String> list_data_field;
    private javax.swing.JList<String> list_result;
    private javax.swing.JList<String> list_target_field;
    private javax.swing.JPanel panelAdmin;
    private javax.swing.JRadioButton rd_mysql;
    private javax.swing.JTextField txt_dbname;
    private javax.swing.JTextField txt_default_value;
    private javax.swing.JTextField txt_host;
    private javax.swing.JPasswordField txt_password;
    private javax.swing.JTextField txt_port;
    private javax.swing.JTextField txt_user;
    // End of variables declaration//GEN-END:variables

    @Override
    public final void initForm() {
        Common.setOpaqueComponent(false,
                this, jPanel2, panelAdmin, jPanel1,
                rd_mysql,
                jPanel3, jPanel4, jScrollPane1,
                cek_sql_syntax, check_default_value);
        jScrollPane1.getViewport().setOpaque(false);
        btn_simpan.setIcon(Icons.LARGE_SAVE.get());
        txt_default_value.setEditable(false);
        Common.activateComponent(false, btn_add, btn_cek_koneksi, btn_remove, btn_simpan, btn_test);
        InputTextType.makeNumericInput(txt_port);
        resetForm();
    }

    private void addDataField() {
        data_field_model.clear();
        data_field_model.addElement("transaction_date");
        data_field_model.addElement("transaction_id");
        data_field_model.addElement("module");
        data_field_model.addElement("description");
        data_field_model.addElement("transaction_amount");
        data_field_model.addElement("detail");

        list_data_field.setModel(data_field_model);
    }

    @Override
    public void resetForm() {
        loadTipe();
        addDataField();
        lbl_status.setText("");
        list_target_field.setModel(target_field_model);
        list_result.setModel(result_model);
        readCurentConfiguration();
    }

}
