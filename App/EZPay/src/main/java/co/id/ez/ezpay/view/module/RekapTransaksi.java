/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package co.id.ez.ezpay.view.module;

import co.id.ez.ezpay.abstracts.AbstractViewLaporan;
import co.id.ez.ezpay.app.Common;
import co.id.ez.ezpay.app.ProfileManager;
import co.id.ez.ezpay.controller.TransactionRecapController;
import co.id.ez.ezpay.enums.MessageType;
import co.id.ez.ezpay.enums.RequestType;
import co.id.ez.ezpay.enums.report.TransactionModule;
import co.id.ez.ezpay.model.data.transaksi.DailyRecapMPModel;
import co.id.ez.ezpay.model.data.transaksi.DailyRecapPDAMModel;
import co.id.ez.ezpay.model.data.transaksi.DailyRecapPospaidModel;
import co.id.ez.ezpay.model.data.transaksi.DailyRecapPrepaidModel;
import co.id.ez.ezpay.model.data.transaksi.DailyRecapVoucherModel;
import co.id.ez.ezpay.model.data.transaksi.MPMonthlyRecapModel;
import co.id.ez.ezpay.model.data.transaksi.MonthlyRecapModel;
import com.json.JSONObject;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;

/**
 *
 * @author Lutfi
 */
public class RekapTransaksi extends AbstractViewLaporan {

    private final TransactionRecapController controller = new TransactionRecapController();
    private TransactionModule module;
    private boolean isDaily;

    /**
     * Creates new form HistoryTransaksi
     *
     * @param module
     */
    public RekapTransaksi(TransactionModule module) {
        this(module, 1);
    }

    /**
     * Creates new form HistoryTransaksi
     *
     * @param module
     * @param type
     */
    public RekapTransaksi(TransactionModule module, int type) {
        super(
                (type == 0 ? module.getDailyRecapReport().getTableHeader() : module.getMonthlyRecapReport().getTableHeader()),
                false,
                true
        );
        initComponents();
        this.module = module;
        this.isDaily = (type == 0);
        Common.setVisibility(isDaily, panel_tanggal);
        Common.setVisibility(!isDaily, panel_bulan);
        initForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        cmb_module = new javax.swing.JComboBox<>();
        panel_tanggal = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        date_start = new com.toedter.calendar.JDateChooser();
        date_end = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        panel_bulan = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        month_start = new com.toedter.calendar.JMonthChooser();
        year_start = new com.toedter.calendar.JYearChooser();
        jLabel6 = new javax.swing.JLabel();
        month_end = new com.toedter.calendar.JMonthChooser();
        year_end = new com.toedter.calendar.JYearChooser();
        jPanel7 = new javax.swing.JPanel();
        btn_cari = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        panelData = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout(1, 0));

        jPanel1.setPreferredSize(new java.awt.Dimension(350, 140));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel6.setPreferredSize(new java.awt.Dimension(800, 105));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Modul", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel5.setForeground(new java.awt.Color(255, 255, 255));
        jPanel5.setPreferredSize(new java.awt.Dimension(110, 92));

        cmb_module.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        cmb_module.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmb_module, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmb_module, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        panel_tanggal.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tanggal", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        panel_tanggal.setPreferredSize(new java.awt.Dimension(150, 95));

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("Dari");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        date_start.setDateFormatString("y-MM-dd");
        date_start.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        date_end.setDateFormatString("y-MM-dd");
        date_end.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("Hingga");
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        javax.swing.GroupLayout panel_tanggalLayout = new javax.swing.GroupLayout(panel_tanggal);
        panel_tanggal.setLayout(panel_tanggalLayout);
        panel_tanggalLayout.setHorizontalGroup(
            panel_tanggalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_tanggalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_tanggalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_tanggalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(date_end, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                    .addComponent(date_start, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panel_tanggalLayout.setVerticalGroup(
            panel_tanggalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_tanggalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_tanggalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(date_start, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_tanggalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(date_end, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        panel_bulan.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Bulan", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        panel_bulan.setPreferredSize(new java.awt.Dimension(300, 95));

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("Dari");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        month_start.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        month_start.setYearChooser(year_start);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel6.setText("Hingga");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        month_end.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        month_end.setYearChooser(year_end);

        javax.swing.GroupLayout panel_bulanLayout = new javax.swing.GroupLayout(panel_bulan);
        panel_bulan.setLayout(panel_bulanLayout);
        panel_bulanLayout.setHorizontalGroup(
            panel_bulanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_bulanLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_bulanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_bulanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_bulanLayout.createSequentialGroup()
                        .addComponent(month_start, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(year_start, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_bulanLayout.createSequentialGroup()
                        .addComponent(month_end, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(year_end, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        panel_bulanLayout.setVerticalGroup(
            panel_bulanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_bulanLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_bulanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(year_start, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(month_start, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_bulanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(year_end, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(month_end, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_tanggal, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_bulan, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(panel_tanggal, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(panel_bulan, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel1.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel7.setPreferredSize(new java.awt.Dimension(896, 35));

        btn_cari.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btn_cari.setForeground(new java.awt.Color(27, 38, 44));
        btn_cari.setText("Tampilkan");
        btn_cari.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_cari.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btn_cari.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btn_cari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cariActionPerformed(evt);
            }
        });

        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));
        jSeparator1.setPreferredSize(new java.awt.Dimension(50, 1));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_cari)
                .addContainerGap(737, Short.MAX_VALUE))
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(btn_cari, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 1, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel7, java.awt.BorderLayout.PAGE_END);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        panelData.setLayout(new java.awt.CardLayout());
        add(panelData, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_cariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cariActionPerformed
        // TODO add your handling code here:
        loadData();
    }//GEN-LAST:event_btn_cariActionPerformed

    @Override
    public final void initForm() {
        Common.setOpaqueComponent(false, panelData, jPanel1, jPanel5, jPanel6, jPanel7, panel_bulan, panel_tanggal);
        loadViewTable(panelData);
        btn_cari.setToolTipText("tampilkan");
        setModulList();
        setCurentDate(date_start, date_end);
        resetForm();
        loadDataToTables(null);
    }

    private void setModulList() {
        cmb_module.removeAllItems();
        if (module == TransactionModule.MULTIPAYMENT) {
            cmb_module.addItem("-- Semua Biller --");
            for (TransactionModule modul : TransactionModule.values()) {
                if (modul.getParent() == TransactionModule.MULTIPAYMENT) {
                    cmb_module.addItem(modul.name());
                }
            }
        } else {
            cmb_module.addItem(module.name());
        }
        cmb_module.setSelectedIndex(0);
    }

    @Override
    public void resetForm() {
    }

    @Override
    public void loadData(String search) {
        try {
            viewTableData.clearTable();
            LinkedList tranmainData;

            if (isDaily) {
                tranmainData = loadDailyReport();
            } else {
                tranmainData = loadMonthlyReport();
            }

            loadDataFromDB(tranmainData);
        } catch (SQLException e) {
            Common.showErrorMessage(MessageType.SYSTEM_ERROR, this);
            Common.errorLog("[SQLException] Failed load data history from tranmain", e);
        } catch (Exception e) {
            Common.showErrorMessage(MessageType.FATAL_ERROR, this);
            Common.errorLog("[Exception] Failed load data history from tranmain", e);
        }
    }

    private LinkedList<JSONObject> loadDailyReport() throws SQLException {
        String startdate = new SimpleDateFormat("yyyy-MM-dd").format(date_start.getDate());
        String enddate = new SimpleDateFormat("yyyy-MM-dd").format(date_end.getDate());
        switch (module) {
            case VOUCHER:
                return controller.getVoucherDailyReport(startdate, enddate);
            case PDAM:
                return controller.getPDAMDailyReport(startdate, enddate);
            case PREPAID:
                return controller.getPrepaidDailyReport(startdate, enddate);
            case POSTPAID:
                return controller.getPospaidDailyReport(startdate, enddate);
            default:
                String biller = cmb_module.getSelectedIndex() == 0
                        ? null
                        : RequestType.parse(cmb_module.getSelectedItem().toString()).getModule().toLowerCase();
                return controller.getMultiPaymentDailyReport(startdate, enddate, biller);
        }

    }

    private LinkedList<JSONObject> loadMonthlyReport() throws SQLException {
        int startmonth = month_start.getMonth() + 1;
        int startyears = year_start.getYear();
        int endmonth = month_end.getMonth() + 1;
        int endyears = year_end.getYear();

        switch (module) {
            case VOUCHER:
                return controller
                        .getVoucherMonthlyReport(
                                startyears + "-" + Common.leftPadding("" + startmonth, 2, "0"),
                                endyears + "-" + Common.leftPadding("" + endmonth, 2, "0"));
            case PDAM:
                return controller
                        .getPDAMMonthlyReport(
                                startyears + "-" + Common.leftPadding("" + startmonth, 2, "0"),
                                endyears + "-" + Common.leftPadding("" + endmonth, 2, "0"));
            case PREPAID:
                return controller
                        .getPrepaidMonthlyReport(
                                startyears + "-" + Common.leftPadding("" + startmonth, 2, "0"),
                                endyears + "-" + Common.leftPadding("" + endmonth, 2, "0"));
            case POSTPAID:
                return controller
                        .getPospaidMonthlyReport(
                                startyears + "-" + Common.leftPadding("" + startmonth, 2, "0"),
                                endyears + "-" + Common.leftPadding("" + endmonth, 2, "0"));
            default:
                String biller = cmb_module.getSelectedIndex() == 0
                        ? null
                        : RequestType.parse(cmb_module.getSelectedItem().toString()).getModule().toLowerCase();
                return controller
                        .getMultiPaymentMonthlyReport(
                                startyears + "-" + Common.leftPadding("" + startmonth, 2, "0"),
                                endyears + "-" + Common.leftPadding("" + endmonth, 2, "0"),
                                biller);
        }

    }

    private void loadDataFromDB(LinkedList<JSONObject> pTranmainData) {
        if (pTranmainData != null && pTranmainData.size() > 0) {
            if (isDaily) {
                loadDailyRecapReport(pTranmainData);
            } else {
                loadMonthlyRecapReport(pTranmainData);
            }
        } else {
            viewTableData.clearTable();
            Common.showWarningMessage("Data tidak ditemukan", this);
        }
    }

    private void loadDailyRecapReport(LinkedList<JSONObject> pTranmainData) {
        switch (module) {
            case VOUCHER:
                loadVoucherDailyRecapReport(pTranmainData);
                break;
            case PREPAID:
                loadPrepaidDailyRecapReport(pTranmainData);
                break;
            case PDAM:
                loadPDAMDailyRecapReport(pTranmainData);
                break;
            case POSTPAID:
                loadPospaidDailyRecapReport(pTranmainData);
                break;
            default:
                loadMPDailyRecapReport(pTranmainData);
                break;
        }
    }

    private void loadMonthlyRecapReport(LinkedList<JSONObject> pTranmainData) {
        if (module == TransactionModule.MULTIPAYMENT) {
            loadMultiPaymentMonthlyRecapReport(pTranmainData);
        } else {
            LinkedList<MonthlyRecapModel> rows = new LinkedList();
            LinkedHashMap<String, LinkedList<MonthlyRecapModel>> maps = new LinkedHashMap();

            int index = 0;
            for (JSONObject jSONObject : pTranmainData) {
                String bulan = jSONObject.get("bulan").toString();
                String date = jSONObject.get("transaction_date").toString();
                String jumlahtransaksi = jSONObject.get("jml_transaksi").toString();
                String total = Common.formatRupiah(jSONObject.getDouble("jml_amount"), false);

                if (maps.containsKey(bulan)) {
                    MonthlyRecapModel model = new MonthlyRecapModel("", "", date, jumlahtransaksi, total);
                    maps.get(bulan).add(model);
                } else {
                    index++;
                    LinkedList<MonthlyRecapModel> list = new LinkedList();
                    MonthlyRecapModel model = new MonthlyRecapModel(String.valueOf(index), bulan, date, jumlahtransaksi, total);
                    list.add(model);
                    maps.put(bulan, list);
                }

            }

            maps.values().forEach(value -> {
                value.forEach(dailyRecapVoucherModel -> {
                    rows.add(dailyRecapVoucherModel);
                });
            });

            loadDataToTables(rows);
        }
    }

    private void loadMultiPaymentMonthlyRecapReport(LinkedList<JSONObject> pTranmainData) {
        LinkedList<MonthlyRecapModel> rows = new LinkedList();
        LinkedHashMap<String, LinkedList<MonthlyRecapModel>> maps = new LinkedHashMap();

        int index = 0;
        for (JSONObject jSONObject : pTranmainData) {
            String bulan = jSONObject.get("bulan").toString();
            String biller = jSONObject.get("biller").toString();
            String date = jSONObject.get("transaction_date").toString();
            String jumlahtransaksi = jSONObject.get("jml_transaksi").toString();
            String total = Common.formatRupiah(jSONObject.getDouble("jml_amount"), false);

            if (maps.containsKey(bulan.concat(biller))) {
                MPMonthlyRecapModel model = new MPMonthlyRecapModel("", "", "", date, jumlahtransaksi, total);
                maps.get(bulan.concat(biller)).add(model);
            } else {
                index++;
                LinkedList<MonthlyRecapModel> list = new LinkedList();
                MPMonthlyRecapModel model
                        = new MPMonthlyRecapModel(String.valueOf(index), bulan, biller, date, jumlahtransaksi, total);
                list.add(model);
                maps.put(bulan.concat(biller), list);
            }
        }

        maps.values().forEach(value -> {
            value.forEach(dailyRecapVoucherModel -> {
                rows.add(dailyRecapVoucherModel);
            });
        });

//        LinkedList<TableHeader> col = TransactionModule.MULTIPAYMENT.getMonthlyRecapReport().getTableHeader();
        loadDataToTables(rows);
    }

    private void loadVoucherDailyRecapReport(LinkedList<JSONObject> pTranmainData) {
        LinkedList<DailyRecapVoucherModel> rows = new LinkedList();
        LinkedHashMap<String, LinkedList<DailyRecapVoucherModel>> maps = new LinkedHashMap();

        int index = 0;
        for (JSONObject jSONObject : pTranmainData) {

            String date = jSONObject.get("transaction_date").toString();
            String userid = jSONObject.get("user_id").toString();
            String trxid = jSONObject.get("transaction_id").toString();
            String dest = jSONObject.get("dest_number").toString();
            String vcrid = jSONObject.get("voucher_id").toString();
            String nominal = Common.formatRupiah(jSONObject.getDouble("nominal"), false);
            String harga = Common.formatRupiah(jSONObject.getDouble("harga_jual"), false);
            String refnum = jSONObject.get("refnumber").toString();
            String sn = jSONObject.get("serial_number").toString();
            String vouchername = jSONObject.get("voucher_name").toString();
            String provider = jSONObject.get("provider_name").toString();

            if (maps.containsKey(date)) {
                DailyRecapVoucherModel model
                        = new DailyRecapVoucherModel(
                                "", "", trxid, refnum,
                                userid, dest, vcrid,
                                vouchername, provider, sn,
                                nominal, harga
                        );
                maps.get(date).add(model);
            } else {
                index++;
                LinkedList<DailyRecapVoucherModel> list = new LinkedList();
                DailyRecapVoucherModel model
                        = new DailyRecapVoucherModel(
                                String.valueOf(index), date, trxid, refnum,
                                userid, dest, vcrid,
                                vouchername, provider, sn,
                                nominal, harga
                        );
                list.add(model);
                maps.put(date, list);
            }

        }

        maps.values().forEach(value -> {
            value.forEach(dailyRecapVoucherModel -> {
                rows.add(dailyRecapVoucherModel);
            });
        });

        loadDataToTables(rows);
    }

    private void loadPrepaidDailyRecapReport(LinkedList<JSONObject> pTranmainData) {
        LinkedList<DailyRecapPrepaidModel> rows = new LinkedList();
        LinkedHashMap<String, LinkedList<DailyRecapPrepaidModel>> maps = new LinkedHashMap();

        int index = 0;
        for (JSONObject jSONObject : pTranmainData) {

            String date = jSONObject.get("transaction_date").toString();
            String userid = jSONObject.get("user_id").toString();
            String trxid = jSONObject.get("transaction_id").toString();
            String subid = jSONObject.get("subscriber_id").toString();
            String msn = jSONObject.get("msn").toString();
            String name = jSONObject.get("subscriber_name").toString();
            String tarif = jSONObject.get("segmentation").toString();
            String nominal = Common.formatRupiah(jSONObject.getDouble("nominal"), false);
            String kwh = jSONObject.get("kwh").toString();
            String token = jSONObject.get("token").toString();
            String harga = Common.formatRupiah(jSONObject.getDouble("harga_jual"), false);
            String refnum = jSONObject.get("refnumber").toString();

            if (maps.containsKey(date)) {
                DailyRecapPrepaidModel model
                        = new DailyRecapPrepaidModel(
                                "", "", trxid,
                                refnum, userid, subid,
                                msn, name, tarif,
                                nominal, kwh, token, harga
                        );
                maps.get(date).add(model);
            } else {
                index++;
                LinkedList<DailyRecapPrepaidModel> list = new LinkedList();
                DailyRecapPrepaidModel model
                        = new DailyRecapPrepaidModel(
                                String.valueOf(index), date, trxid,
                                refnum, userid, subid,
                                msn, name, tarif,
                                nominal, kwh, token,
                                harga
                        );
                list.add(model);
                maps.put(date, list);
            }

        }

        maps.values().forEach(value -> {
            value.forEach(dailyRecapVoucherModel -> {
                rows.add(dailyRecapVoucherModel);
            });
        });

        loadDataToTables(rows);
    }

    private void loadPDAMDailyRecapReport(LinkedList<JSONObject> pTranmainData) {
        LinkedList<DailyRecapPDAMModel> rows = new LinkedList();
        LinkedHashMap<String, LinkedList<DailyRecapPDAMModel>> maps = new LinkedHashMap();

        int index = 0;
        for (JSONObject jSONObject : pTranmainData) {

            String date = jSONObject.get("transaction_date").toString();
            String userid = jSONObject.get("user_id").toString();
            String trxid = jSONObject.get("transaction_id").toString();
            String subid = jSONObject.get("subscriber_id").toString();
            String name = jSONObject.get("subscriber_name").toString();
            String tarif = jSONObject.get("subscriber_segmentation").toString();
            String bulan = jSONObject.get("bill_status").toString() + " Bulan";
            String total = Common.formatRupiah(jSONObject.getDouble("total_bill_amount"), false);
            String refnum = jSONObject.get("refnumber").toString();

            if (maps.containsKey(date)) {
                DailyRecapPDAMModel model
                        = new DailyRecapPDAMModel("", "",
                                trxid, refnum, userid,
                                subid, name, tarif, bulan, total);
                maps.get(date).add(model);
            } else {
                index++;
                LinkedList<DailyRecapPDAMModel> list = new LinkedList();
                DailyRecapPDAMModel model
                        = new DailyRecapPDAMModel(String.valueOf(index), date,
                                trxid, refnum, userid,
                                subid, name, tarif, bulan, total);
                list.add(model);
                maps.put(date, list);
            }

        }

        maps.values().forEach(value -> {
            value.forEach(dailyRecapVoucherModel -> {
                rows.add(dailyRecapVoucherModel);
            });
        });

        loadDataToTables(rows);
    }

    private void loadPospaidDailyRecapReport(LinkedList<JSONObject> pTranmainData) {
        LinkedList<DailyRecapPospaidModel> rows = new LinkedList();
        LinkedHashMap<String, LinkedList<DailyRecapPospaidModel>> maps = new LinkedHashMap();

        int index = 0;
        for (JSONObject jSONObject : pTranmainData) {

            String date = jSONObject.get("transaction_date").toString();
            String userid = jSONObject.get("user_id").toString();
            String trxid = jSONObject.get("transaction_id").toString();
            String subid = jSONObject.get("subscriber_id").toString();
            String name = jSONObject.get("subscriber_name").toString();
            String tarif = jSONObject.has("segmentation")
                    ? jSONObject.get("segmentation").toString()
                    : "-";
            String bulan = jSONObject.get("bill_status").toString() + " Bulan";
            String total = Common.formatRupiah(jSONObject.getDouble("total_bill_amount"), false);
            String refnum = jSONObject.get("refnumber").toString();

            if (maps.containsKey(date)) {
                DailyRecapPospaidModel model
                        = new DailyRecapPospaidModel("", "",
                                trxid, refnum, userid,
                                subid, name, tarif, bulan, total);
                maps.get(date).add(model);
            } else {
                index++;
                LinkedList<DailyRecapPospaidModel> list = new LinkedList();
                DailyRecapPospaidModel model
                        = new DailyRecapPospaidModel(String.valueOf(index), date,
                                trxid, refnum, userid,
                                subid, name, tarif, bulan, total);
                list.add(model);
                maps.put(date, list);
            }

        }

        maps.values().forEach(value -> {
            value.forEach(dailyRecapVoucherModel -> {
                rows.add(dailyRecapVoucherModel);
            });
        });

        loadDataToTables(rows);
    }

    private void loadMPDailyRecapReport(LinkedList<JSONObject> pTranmainData) {
        LinkedList<DailyRecapMPModel> rows = new LinkedList();
        LinkedHashMap<String, LinkedList<DailyRecapMPModel>> maps = new LinkedHashMap();

        int index = 0;
        for (JSONObject jSONObject : pTranmainData) {
            String date = jSONObject.get("transaction_date").toString();
            String biller = jSONObject.get("biller").toString();
            String userid = jSONObject.get("user_id").toString();
            String trxid = jSONObject.get("transaction_id").toString();
            String subid = jSONObject.get("input_id_1").toString();
            JSONObject transactiondata = new JSONObject(jSONObject.get("transaction_data").toString());
            String detailkey = jSONObject.get("details").toString();
            String total = Common.formatRupiah(jSONObject.getDouble("total_bill_amount"), false);
            String refnum = jSONObject.get("refnumber").toString();
            String[] key = detailkey.replace("[", "").replace("]", "").split(";");

            if (maps.containsKey(date.concat(biller))) {
                int i = 0;
                for (String keys : key) {
                    if (transactiondata.has(keys)) {
                        DailyRecapMPModel model;
                        if (i == 0) {
                            String value = transactiondata.get(keys).toString();
                            model = new DailyRecapMPModel(
                                    "", "", "", trxid,
                                    refnum, userid, subid,
                                    keys.concat(": ").concat(value), total
                            );
                        } else {
                            String value = transactiondata.get(keys).toString();
                            model = new DailyRecapMPModel(
                                    "", "", "", "",
                                    "", "", "",
                                    keys.concat(": ").concat(value), ""
                            );
                        }
                        maps.get(date.concat(biller)).add(model);
                        i++;
                    }
                }
            } else {
                index++;
                LinkedList<DailyRecapMPModel> list = new LinkedList();
                int i = 0;
                for (String keys : key) {
                    if (transactiondata.has(keys)) {
                        DailyRecapMPModel model;
                        if (i == 0) {
                            String value = transactiondata.get(keys).toString();
                            model = new DailyRecapMPModel(
                                    String.valueOf(index), biller, date, trxid,
                                    refnum, userid, subid,
                                    keys.concat(": ").concat(value), total
                            );
                        } else {
                            String value = transactiondata.get(keys).toString();
                            model = new DailyRecapMPModel(
                                    "", "", "", "",
                                    "", "", "",
                                    keys.concat(": ").concat(value), ""
                            );

                        }
                        list.add(model);
                        i++;
                    }
                }
                maps.put(date.concat(biller), list);
            }

        }

        maps.values().forEach(value -> {
            value.forEach(dailyRecapVoucherModel -> {
                rows.add(dailyRecapVoucherModel);
            });
        });

        loadDataToTables(rows);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_cari;
    private javax.swing.JComboBox<String> cmb_module;
    private com.toedter.calendar.JDateChooser date_end;
    private com.toedter.calendar.JDateChooser date_start;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JSeparator jSeparator1;
    private com.toedter.calendar.JMonthChooser month_end;
    private com.toedter.calendar.JMonthChooser month_start;
    private javax.swing.JPanel panelData;
    private javax.swing.JPanel panel_bulan;
    private javax.swing.JPanel panel_tanggal;
    private com.toedter.calendar.JYearChooser year_end;
    private com.toedter.calendar.JYearChooser year_start;
    // End of variables declaration//GEN-END:variables

    @Override
    public void loadData() {
        loadData("");
    }

    @Override
    public void loadReport() {
        try {
            HashMap maps = ProfileManager.instance().getProfileMaps();
            String tQuery;
            if (isDaily) {
                if (module.getDailyRecapReport().getReportName() != null) {
                    tQuery = getQueryDailyReport(maps);
                    previewReport(module.getDailyRecapReport().getReportName(), maps, tQuery);
                }
            } else {
                if (module.getMonthlyReportName() != null) {
                    tQuery = getQueryMonthlyReport(maps);
                    previewReport(module.getMonthlyReportName(), maps, tQuery);
                }
            }
        } catch (Exception e) {
            Common.errorLog("[Exception] Cannot show report", e);
            Common.showErrorMessage("Cannot show report: " + e.getMessage(), this);
        }

    }

    private String getQueryDailyReport(final HashMap maps) {
        String startdate = new SimpleDateFormat("yyyy-MM-dd").format(date_start.getDate());
        String enddate = new SimpleDateFormat("yyyy-MM-dd").format(date_end.getDate());
        maps.put("start_date", startdate);
        maps.put("end_date", enddate);
        switch (module) {
            case VOUCHER:
                return controller.getQueryVoucherDailyReport(startdate, enddate);
            case PDAM:
                return controller.getQueryPDAMDailyReport(startdate, enddate);
            case PREPAID:
                return controller.getQueryPrepaidDailyReport(startdate, enddate);
            case POSTPAID:
                return controller.getQueryPospaidDailyReport(startdate, enddate);
            default:
                String biller = cmb_module.getSelectedIndex() == 0
                        ? null
                        : RequestType.parse(cmb_module.getSelectedItem().toString()).getModule().toLowerCase();
                return controller.getQueryMultiPaymentDailyReport(startdate, enddate, biller);
        }

    }

    private String getQueryMonthlyReport(final HashMap maps) {
        int startmonth = month_start.getMonth() + 1;
        int startyears = year_start.getYear();
        int endmonth = month_end.getMonth() + 1;
        int endyears = year_end.getYear();

        maps.put("start_date", startyears + "-" + Common.leftPadding("" + startmonth, 2, "0"));
        maps.put("end_date", endyears + "-" + Common.leftPadding("" + endmonth, 2, "0"));

        switch (module) {
            case VOUCHER:
                return controller
                        .getQueryVoucherMonthlyReport(
                                startyears + "-" + Common.leftPadding("" + startmonth, 2, "0"),
                                endyears + "-" + Common.leftPadding("" + endmonth, 2, "0"));
            case PDAM:
                return controller
                        .getQueryPDAMMonthlyReport(
                                startyears + "-" + Common.leftPadding("" + startmonth, 2, "0"),
                                endyears + "-" + Common.leftPadding("" + endmonth, 2, "0"));
            case PREPAID:
                return controller
                        .getQueryPrepaidMonthlyReport(
                                startyears + "-" + Common.leftPadding("" + startmonth, 2, "0"),
                                endyears + "-" + Common.leftPadding("" + endmonth, 2, "0"));
            case POSTPAID:
                return controller
                        .getQueryPospaidMonthlyReport(
                                startyears + "-" + Common.leftPadding("" + startmonth, 2, "0"),
                                endyears + "-" + Common.leftPadding("" + endmonth, 2, "0"));
            default:
                String biller = cmb_module.getSelectedIndex() == 0
                        ? null
                        : RequestType.parse(cmb_module.getSelectedItem().toString()).getModule().toLowerCase();
                return controller
                        .getQueryMultiPaymentMonthlyReport(
                                startyears + "-" + Common.leftPadding("" + startmonth, 2, "0"),
                                endyears + "-" + Common.leftPadding("" + endmonth, 2, "0"),
                                biller);
        }

    }
}
