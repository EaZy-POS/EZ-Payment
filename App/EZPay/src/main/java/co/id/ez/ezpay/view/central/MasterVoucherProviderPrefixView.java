/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package co.id.ez.ezpay.view.central;

import co.id.ez.ezpay.view.master.*;
import co.id.ez.ezpay.app.Common;
import co.id.ez.ezpay.enums.MessageType;
import co.id.ez.ezpay.enums.util.Icons;
import co.id.ez.ezpay.interfaces.DataTable;
import co.id.ez.ezpay.model.data.central.CentralVoucherProviderPrefixModel;
import co.id.ez.ezpay.msg.data.voucher.provider.GetVoucherProvider;
import co.id.ez.ezpay.msg.data.voucher.provider.prefix.AddVoucherProviderPrefix;
import co.id.ez.ezpay.msg.data.voucher.provider.prefix.DeleteVoucherProviderPrefix;
import co.id.ez.ezpay.msg.data.voucher.provider.prefix.GetVoucherProviderPrefix;
import co.id.ez.ezpay.msg.data.voucher.provider.prefix.UpdateVoucherProviderPrefix;
import co.id.ez.ezpay.util.swings.input.InputTextType;
import co.id.ez.ezpay.util.swings.table.TableActionEvent;
import com.json.JSONArray;
import com.json.JSONObject;
import java.util.HashMap;
import java.util.LinkedList;

/**
 *
 * @author RCS
 */
public class MasterVoucherProviderPrefixView extends CentralDataForm<CentralVoucherProviderPrefixModel> {

    private final HashMap<String, String> provider = new HashMap<>();
    private final HashMap<String, LinkedList<DataTable>> providerPrefix = new HashMap<>();
    private final LinkedList<DataTable> result = new LinkedList<>();
    private boolean isEditStage;

    /**
     * Creates new form SyncronizeView
     */
    public MasterVoucherProviderPrefixView() {
        super(Master.PREFIX_PROVIDER_VOUCHER.getTableHeader(), false, false);
        initComponents();
        initForm();
        btn_simpan.setIcon(Icons.SMALL_SAVE.get());
        btn_batal.setIcon(Icons.SMALL_CANCEL.get());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lbl_x = new javax.swing.JLabel();
        btn_simpan = new javax.swing.JButton();
        txt_id = new javax.swing.JTextField();
        btn_batal = new javax.swing.JButton();
        lbl_x2 = new javax.swing.JLabel();
        txt_prefix = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        panelData = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        cmb_provider = new javax.swing.JComboBox<>();

        setLayout(new java.awt.CardLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Form Input", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 13), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel2.setPreferredSize(new java.awt.Dimension(450, 90));

        lbl_x.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lbl_x.setForeground(new java.awt.Color(255, 255, 255));
        lbl_x.setText("ID");

        btn_simpan.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btn_simpan.setText("Simpan");
        btn_simpan.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_simpan.setPreferredSize(new java.awt.Dimension(100, 25));
        btn_simpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_simpanActionPerformed(evt);
            }
        });

        txt_id.setEditable(false);
        txt_id.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        btn_batal.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btn_batal.setText("Batal");
        btn_batal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_batal.setPreferredSize(new java.awt.Dimension(100, 25));
        btn_batal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_batalActionPerformed(evt);
            }
        });

        lbl_x2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lbl_x2.setForeground(new java.awt.Color(255, 255, 255));
        lbl_x2.setText("Prefix");

        txt_prefix.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lbl_x, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_id, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lbl_x2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btn_simpan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_batal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txt_prefix, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_x, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_id, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_x2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_prefix, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_batal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_simpan, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(451, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2, java.awt.BorderLayout.LINE_START);

        jPanel4.setLayout(new java.awt.BorderLayout());

        panelData.setLayout(new java.awt.CardLayout());
        jPanel4.add(panelData, java.awt.BorderLayout.CENTER);

        jPanel5.setPreferredSize(new java.awt.Dimension(427, 40));

        cmb_provider.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        cmb_provider.setPreferredSize(new java.awt.Dimension(72, 25));
        cmb_provider.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_providerItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmb_provider, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(201, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmb_provider, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(9, Short.MAX_VALUE))
        );

        jPanel4.add(jPanel5, java.awt.BorderLayout.PAGE_START);

        jPanel1.add(jPanel4, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(jPanel3, "card2");
    }// </editor-fold>//GEN-END:initComponents

    private void btn_simpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_simpanActionPerformed
        // TODO add your handling code here:
        int opt = Common.showConfirmMessage("Simpan data?", this);
        if (opt == 0) {
            if (validateForm()) {
                simpan();
            }
        }
    }//GEN-LAST:event_btn_simpanActionPerformed

    private void btn_batalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_batalActionPerformed
        // TODO add your handling code here:
        int opt = Common.showConfirmMessage("Batal menyimpan data?", this);
        if (opt == 0) {
            resetForm();
            loadData();
        }
    }//GEN-LAST:event_btn_batalActionPerformed

    private void cmb_providerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_providerItemStateChanged
        // TODO add your handling code here:
        loadTable();
    }//GEN-LAST:event_cmb_providerItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_batal;
    private javax.swing.JButton btn_simpan;
    private javax.swing.JComboBox<String> cmb_provider;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JLabel lbl_x;
    private javax.swing.JLabel lbl_x2;
    private javax.swing.JPanel panelData;
    private javax.swing.JTextField txt_id;
    private javax.swing.JTextField txt_prefix;
    // End of variables declaration//GEN-END:variables

    private void loadTable() {
        if (cmb_provider.getSelectedIndex() > 0) {
            resetForm();
            LinkedList<CentralVoucherProviderPrefixModel> list = new LinkedList<>();
            int index = 0;
            if (providerPrefix.containsKey(provider.get(cmb_provider.getSelectedItem().toString()))) {
                for (DataTable dataTable : providerPrefix.get(provider.get(cmb_provider.getSelectedItem().toString()))) {
                    index++;
                    CentralVoucherProviderPrefixModel model = (CentralVoucherProviderPrefixModel) dataTable;
                    model.setNumber(index);
                    list.add(model);
                }
            }

            loadDataToTables(list, getTableActionEvent());
        }
    }

    @Override
    public boolean validateForm() {

        if (cmb_provider.getSelectedIndex() == 0) {
            Common.showWarningMessage("Mohon pilih provider!", this);
            return false;
        }

        if (txt_prefix.getText().equals("") || txt_prefix.getText().length() < 4) {
            txt_prefix.requestFocus();
            Common.showWarningMessage("Mohon isi prefix nomor dengan benar!", this);
            return false;
        }

        if (!isEditStage) {
            for (DataTable dataTable : result) {
                CentralVoucherProviderPrefixModel model = (CentralVoucherProviderPrefixModel) dataTable;
                if (txt_prefix.getText().equals(model.getPrefix())) {
                    txt_prefix.requestFocus();
                    Common.showWarningMessage("Prefix Sudah digunakan!", this);
                    return false;
                }
            }
        }

        return true;
    }

    @Override
    public final void initForm() {
        Common.setOpaqueComponent(false, this, jPanel2, panelData, jPanel1,
                panelData, jPanel1, jPanel3, jPanel4, jPanel5);
        loadViewTable(panelData);
        btn_simpan.setIcon(Icons.SMALL_SAVE.get());
        btn_batal.setIcon(Icons.SMALL_CANCEL.get());
        viewTableData.hideHeaderSeparator();
        viewTableData.clearTable();
        InputTextType.makeNumericInput(4, txt_prefix);
        resetForm();
        loadDataProvider();
    }

    @Override
    public void resetForm() {
        txt_id.setText("Generated by system");
        Common.clearText(txt_prefix);
        isEditStage = false;
        txt_prefix.requestFocus();
        cmb_provider.setEnabled(true);
    }

    @Override
    public void loadData(String search) {
        try {
            viewTableData.clearTable();
            if (search.length() == 0) {
                JSONObject data = sendRequetToCentral(new GetVoucherProviderPrefix(), "GET");
                result.clear();
                providerPrefix.clear();

                if (data != null) {
                    JSONArray dataPrefix = data.getJSONArray("data");
                    for (int i = 0; i < dataPrefix.length(); i++) {
                        JSONObject prefix = dataPrefix.getJSONObject(i);
                        String tProviderID = prefix.get("provider_id").toString();
                        String tProviderName = prefix.get("provider_name").toString();
                        JSONArray tPrefixList = prefix.getJSONArray("prefix_list");

                        for (int j = 0; j < tPrefixList.length(); j++) {
                            JSONObject tPrefixData = new JSONObject(tPrefixList.get(j).toString());
                            String tId = tPrefixData.get("id").toString();
                            String tPrefix = tPrefixData.get("prefix").toString();

                            CentralVoucherProviderPrefixModel model = new CentralVoucherProviderPrefixModel(
                                    i + 1,
                                    tId,
                                    tProviderID,
                                    tProviderName,
                                    tPrefix,
                                    null
                            );

                            if (providerPrefix.containsKey(tProviderID)) {
                                providerPrefix.get(tProviderID).add(model);
                            } else {
                                LinkedList<DataTable> list = new LinkedList<>();
                                list.add(model);
                                providerPrefix.put(tProviderID, list);
                            }
                        }
                    }
                }
                if(cmb_provider.getSelectedIndex() > 0){
                    loadTable();
                }
            } else {
                if (cmb_provider.getSelectedIndex() > 0) {
                    LinkedList<CentralVoucherProviderPrefixModel> list = new LinkedList<>();
                    int index = 0;
                    for (DataTable dataTable : providerPrefix.get(provider.get(cmb_provider.getSelectedItem().toString()))) {
                        CentralVoucherProviderPrefixModel model = (CentralVoucherProviderPrefixModel) dataTable;
                        if (model.getProviderName().toLowerCase().contains(search.toLowerCase())
                                || model.getPrefix().toLowerCase().contains(search.toLowerCase())) {
                            index++;
                            model.setNumber(index);
                            list.add(model);
                        }
                    }
                    loadDataProvider();
                }
            }
        } catch (Exception e) {
            Common.showErrorMessage(MessageType.SYSTEM_ERROR, this);
            Common.errorLog("[Exception] Failed load data provider prefix", e);
        }
    }

    private void loadDataProvider() {
        try {
            cmb_provider.removeAllItems();
            cmb_provider.addItem("-- Pilih Provider --");
            cmb_provider.setSelectedIndex(0);

            JSONObject data = sendRequetToCentral(new GetVoucherProvider(), "GET");
            if (data != null) {
                JSONArray dataModule = data.getJSONArray("data");
                for (int i = 0; i < dataModule.length(); i++) {
                    JSONObject module = dataModule.getJSONObject(i);
                    String tProviderID = module.get("id").toString();
                    String tProvider = module.get("provider_name").toString();
                    provider.put(tProvider, tProviderID);
                }

                provider.keySet().forEach(key -> {
                    cmb_provider.addItem(key);
                });
            }
        } catch (Exception e) {
            Common.showErrorMessage(MessageType.SYSTEM_ERROR, this);
            Common.errorLog("[Exception] Failed load data provider", e);
        }
    }

    @Override
    public void loadData() {
        loadData("");
    }

    @Override
    public TableActionEvent getTableActionEvent() {
        TableActionEvent event = new TableActionEvent() {
            @Override
            public void onView(int row) {
            }

            @Override
            public void onCheckStatus(int row) {
            }

            @Override
            public boolean canView() {
                return false;
            }

            @Override
            public boolean canCheck() {
                return false;
            }

            @Override
            public boolean canReprint() {
                return false;
            }

            @Override
            public void onReprint(int row) {
            }

            @Override
            public boolean canEdit() {
                return true;
            }

            @Override
            public void onEdit(int row) {
                CentralVoucherProviderPrefixModel model = (CentralVoucherProviderPrefixModel) viewTableData.getTableModel().getData().get(row);
                int opt = Common.showConfirmMessage("Rubah data user " + model.getPrefix() + "?", viewTableData);

                if (opt == 0) {
                    editData(model);
                }
            }

            @Override
            public void onDelete(int row) {
                CentralVoucherProviderPrefixModel model = (CentralVoucherProviderPrefixModel) viewTableData.getTableModel().getData().get(row);
                int opt = Common.showConfirmMessage("Hapus data modul " + model.getPrefix() + "?", viewTableData);

                if (opt == 0) {
                    delete(model);
                }
            }

            @Override
            public boolean canDelete() {
                return true;
            }
        };

        return event;
    }

    @Override
    public void delete(CentralVoucherProviderPrefixModel model) {
        try {
            DeleteVoucherProviderPrefix req = new DeleteVoucherProviderPrefix();
            req.setId(model.getId());
            JSONObject data = sendRequetToCentral(req, "POST");
            if (data != null) {
                loadData();
                Common.showInfoMessage("Data berhasil dihapus", this);
                resetForm();
            }
        } catch (Exception e) {
            Common.showErrorMessage(MessageType.SYSTEM_ERROR, this);
            Common.errorLog("[Exception] Failed delete data jabatan", e);
        }
    }

    @Override
    public void simpan() {
        try {
            String provider_id = provider.get(cmb_provider.getSelectedItem().toString());
            String prefix = txt_prefix.getText();
            String id = isEditStage ? txt_id.getText() : "";

            if (isEditStage) {
                UpdateVoucherProviderPrefix req = new UpdateVoucherProviderPrefix();
                req.setProvider_id(provider_id);
                req.setPrefix(prefix);
                req.setId(id);

                JSONObject data = sendRequetToCentral(req, "POST");
                if (data != null) {
                    loadData();
                    Common.showInfoMessage("Data berhasil dirubah", this);
                    resetForm();
                }
            } else {
                AddVoucherProviderPrefix req = new AddVoucherProviderPrefix();
                req.setPrefix(prefix);
                req.setProvider_id(provider_id);

                JSONObject data = sendRequetToCentral(req, "POST");
                if (data != null) {
                    loadData();
                    Common.showInfoMessage("Data berhasil disimpan", this);
                    resetForm();
                }
            }

        } catch (Exception e) {
            Common.showErrorMessage(MessageType.SYSTEM_ERROR, this);
            Common.errorLog("[SQLException] Failed insert data karyawan", e);
            resetForm();
        }
    }

    @Override
    public void editData(CentralVoucherProviderPrefixModel model) {
        txt_id.setText(model.getId());
        txt_prefix.setText(model.getPrefix());
        isEditStage = true;
        cmb_provider.setEnabled(false);
    }

    @Override
    public String getDataName() {
        return "Data Prefix Provider";
    }

}
