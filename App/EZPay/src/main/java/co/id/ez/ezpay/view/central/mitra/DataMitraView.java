/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package co.id.ez.ezpay.view.central.mitra;

import co.id.ez.ezpay.view.central.*;
import co.id.ez.ezpay.view.master.*;
import co.id.ez.ezpay.app.Common;
import co.id.ez.ezpay.enums.MessageType;
import co.id.ez.ezpay.enums.util.Icons;
import co.id.ez.ezpay.interfaces.DataTable;
import co.id.ez.ezpay.model.data.central.CentralMitraModel;
import co.id.ez.ezpay.msg.data.mitra.ActivateMitra;
import co.id.ez.ezpay.msg.data.mitra.DeleteMitra;
import co.id.ez.ezpay.msg.data.mitra.GetMitraList;
import co.id.ez.ezpay.msg.data.mitra.UpdateMitra;
import co.id.ez.ezpay.util.swings.table.TableActionEvent;
import com.json.JSONArray;
import com.json.JSONObject;
import java.util.LinkedList;

/**
 *
 * @author RCS
 */
public class DataMitraView extends CentralDataForm<CentralMitraModel> {

    private final LinkedList<Mitra> formInput = new LinkedList<>();
    private final LinkedList<DataTable> result = new LinkedList<>();
    private CentralMitraModel model;

    /**
     * Creates new form SyncronizeView
     */
    public DataMitraView() {
        super(Master.MITRA.getTableHeader(), true, false);
        initComponents();
        initForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        panelData = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        btn_batal = new javax.swing.JButton();
        btn_simpan = new javax.swing.JButton();
        tabPane = new javax.swing.JTabbedPane();

        setLayout(new java.awt.CardLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        panelData.setLayout(new java.awt.CardLayout());
        jPanel1.add(panelData, java.awt.BorderLayout.CENTER);

        jPanel2.setPreferredSize(new java.awt.Dimension(450, 90));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel4.setPreferredSize(new java.awt.Dimension(450, 50));

        btn_batal.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btn_batal.setText("Batal");
        btn_batal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_batal.setPreferredSize(new java.awt.Dimension(100, 25));
        btn_batal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_batalActionPerformed(evt);
            }
        });

        btn_simpan.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btn_simpan.setText("Simpan");
        btn_simpan.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_simpan.setPreferredSize(new java.awt.Dimension(100, 25));
        btn_simpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_simpanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_simpan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_batal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(238, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_simpan, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_batal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(9, 9, 9))
        );

        jPanel2.add(jPanel4, java.awt.BorderLayout.PAGE_END);
        jPanel2.add(tabPane, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel2, java.awt.BorderLayout.LINE_START);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 877, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(jPanel3, "card2");
    }// </editor-fold>//GEN-END:initComponents

    private void btn_batalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_batalActionPerformed
        // TODO add your handling code here:
        if (btn_simpan.isVisible()) {
            int opt = Common.showConfirmMessage("Batal menyimpan data?", this);
            if (opt == 0) {
                resetForm();
                loadData();
            }
        } else {
            resetForm();
        }
    }//GEN-LAST:event_btn_batalActionPerformed

    private void btn_simpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_simpanActionPerformed
        // TODO add your handling code here:
        int opt = Common.showConfirmMessage("Simpan data?", this);
        if (opt == 0) {
            if (validateForm()) {
                simpan();
            }
        }
    }//GEN-LAST:event_btn_simpanActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_batal;
    private javax.swing.JButton btn_simpan;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel panelData;
    private javax.swing.JTabbedPane tabPane;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean validateForm() {
        boolean isValid = false;
        for (Mitra mitra : formInput) {
            isValid = mitra.validateForm();
            if (!isValid) {
                break;
            }
        }

        return isValid;
    }

    @Override
    public String getDataName() {
        return "Data Mitra";
    }

    private void viewDetail(CentralMitraModel model) {
        btn_simpan.setVisible(false);
        btn_batal.setVisible(true);
        btn_batal.setText("Tutup");
        formInput.forEach(mitra -> {
            mitra.initData(model);
        });
    }

    @Override
    public TableActionEvent getTableActionEvent() {
        TableActionEvent event = new TableActionEvent() {
            @Override
            public void onView(int row) {
                CentralMitraModel model = (CentralMitraModel) viewTableData.getTableModel().getData().get(row);
                int opt = Common.showConfirmMessage("Lihat data mitra " + model.getNama() + "?", viewTableData);

                if (opt == 0) {
                    viewDetail(model);
                }
            }

            @Override
            public void onCheckStatus(int row) {
                CentralMitraModel model = (CentralMitraModel) viewTableData.getTableModel().getData().get(row);

                if (model.getStatus().equalsIgnoreCase("aktif")) {
                    Common.showWarningMessage("Status mitra sudah aktif", viewTableData);
                } else {
                    int opt = Common.showConfirmMessage("Aktifkan mitra " + model.getNama() + "?", viewTableData);
                    if (opt == 0) {
                        activateMitra(model);
                    }
                }
            }

            @Override
            public boolean canView() {
                return true;
            }

            @Override
            public boolean canCheck() {
                return true;
            }

            @Override
            public boolean canReprint() {
                return false;
            }

            @Override
            public void onReprint(int row) {
            }

            @Override
            public boolean canEdit() {
                return true;
            }

            @Override
            public void onEdit(int row) {
                CentralMitraModel model = (CentralMitraModel) viewTableData.getTableModel().getData().get(row);
                if (model.getStatus().equalsIgnoreCase("aktif")) {
                    int opt = Common.showConfirmMessage("Rubah data mitra " + model.getNama() + "?", viewTableData);
                    if (opt == 0) {
                        editData(model);
                    }
                } else {
                    Common.showWarningMessage("Status mitra " + model.getNama() + " tidak aktif!\nLakukan aktifasi terlabih dahulu", viewTableData);
                }
            }

            @Override
            public void onDelete(int row) {
                CentralMitraModel model = (CentralMitraModel) viewTableData.getTableModel().getData().get(row);
                if (model.getStatus().equalsIgnoreCase("aktif")) {
                    int opt = Common.showConfirmMessage("Block data mitra " + model.getNama() + "?", viewTableData);

                    if (opt == 0) {
                        delete(model);
                    }
                } else {
                    Common.showWarningMessage("Status mitra " + model.getNama() + " tidak aktif!\nLakukan aktifasi terlabih dahulu", viewTableData);
                }
            }

            @Override
            public boolean canDelete() {
                return true;
            }
        };

        return event;
    }

    @Override
    public void delete(CentralMitraModel model) {
        try {
            DeleteMitra req = new DeleteMitra();
            req.setClient_id(model.getClientIDValue());

            JSONObject data = sendRequetToCentral(req, "POST");
            if (data != null) {
                if (data.getString("rc").equalsIgnoreCase("2000000")) {
                    Common.showInfoMessage("Delete mitra telah berhasil, "
                            + "\ndata akan dimuat ulang", this);
                    loadData();
                }else{
                    Common.showInfoMessage("Delete mitra gagal!, "
                            + "\n"+ data.getString("rcm"), this);
                }
            }
        } catch (Exception e) {
            Common.showErrorMessage(MessageType.SYSTEM_ERROR, this);
            Common.errorLog("[Exception] Failed delete data Mitra", e);
        }
    }

    @Override
    public void editData(CentralMitraModel model) {
        Common.setVisibility(true, btn_batal, btn_simpan);
        this.model = model;
        formInput.forEach(mitra -> {
            mitra.editData(model);
        });
    }

    @Override
    public void simpan() {
        try {
            UpdateMitra req = new UpdateMitra();
            req.setClient_id(model.getClientIDValue());
            req.setId(model.getId());
            
            formInput.forEach(mitra -> {
                mitra.getData(req);
            });

            JSONObject data = sendRequetToCentral(req, "POST");
            if (data != null) {
                if (data.getString("rc").equalsIgnoreCase("2000000")) {
                    Common.showInfoMessage("Update mitra telah berhasil, "
                            + "\ndata akan dimuat ulang", this);
                    loadData();
                }else{
                    Common.showInfoMessage("Update mitra gagal!, "
                            + "\n"+ data.getString("rcm"), this);
                }
            }
        } catch (Exception e) {
            Common.showErrorMessage(MessageType.SYSTEM_ERROR, this);
            Common.errorLog("[Exception] Failed update data mitra", e);
        }
    }

    private void activateMitra(CentralMitraModel model) {
        try {
            ActivateMitra req = new ActivateMitra();
            req.setClient_id(model.getClientIDValue());
            req.setClient_key(model.getClient_key());

            JSONObject data = sendRequetToCentral(req, "POST");
            if (data != null) {
                if (data.getString("rc").equalsIgnoreCase("2000000")) {
                    Common.showInfoMessage("Update mitra telah berhasil, \ndata akan dimuat ulang", this);
                    loadData();
                }else{
                    Common.showInfoMessage("Update gagal!, \n"+ data.getString("rcm"), this);
                }
            }
        } catch (Exception e) {
            Common.showErrorMessage(MessageType.SYSTEM_ERROR, this);
            Common.errorLog("[Exception] Failed activate mitra", e);
        }
    }

    @Override
    public void loadData(String search) {
        try {
            viewTableData.clearTable();
            if (search.length() == 0) {
                JSONObject data = sendRequetToCentral(new GetMitraList(), "GET");
                result.clear();

                if (data != null) {
                    JSONArray dataModule = data.getJSONArray("data");
                    for (int i = 0; i < dataModule.length(); i++) {
                        JSONObject mitra = dataModule.getJSONObject(i);

                        String tID = mitra.get("id").toString();
                        String tClientID = mitra.get("client_id").toString();
                        String tNamaMitra = mitra.get("mitra_name").toString();
                        String tAlamat = mitra.get("address").toString();
                        String tKotta = mitra.get("city").toString();
                        String tProvinsi = mitra.get("provincy").toString();
                        String tKontakPerson = mitra.get("contact_person").toString();
                        String tPhone = mitra.get("phone").toString();
                        String tHandphone = mitra.get("handphone").toString();
                        String tEmail = mitra.get("email").toString();
                        String tTagline = mitra.get("tagline").toString();
                        String tCLientKey = mitra.get("client_key").toString();
                        String tUserID = mitra.get("user_id").toString();
                        String tPassword = mitra.get("user_password").toString();
                        String tStatus = mitra.getString("status");

                        CentralMitraModel model = new CentralMitraModel(
                                i + 1,
                                tID,
                                tClientID,
                                tCLientKey,
                                tUserID,
                                tPassword,
                                tNamaMitra,
                                tAlamat,
                                tKotta,
                                tProvinsi,
                                tKontakPerson,
                                tPhone,
                                tHandphone,
                                tEmail,
                                tTagline,
                                tStatus,
                                null
                        );
                        result.add(model);
                    }
                    loadDataToTables(result, getTableActionEvent());
                }
            } else {
                LinkedList<DataTable> tmpData = new LinkedList<>();
                int index = 0;
                for (DataTable dataTable : result) {
                    CentralMitraModel model = (CentralMitraModel) dataTable;
                    if (isContainsData(search, model.getClientIDValue())
                            || isContainsData(search, model.getNama())
                            || isContainsData(search, model.getAlamat())
                            || isContainsData(search, model.getKota())
                            || isContainsData(search, model.getProvisi())
                            || isContainsData(search, model.getKontak())
                            || isContainsData(search, model.getHp())
                            || isContainsData(search, model.getEmail())) {
                        index++;
                        model.setNumber(index);
                        tmpData.add(dataTable);
                    }
                }
                loadDataToTables(tmpData, getTableActionEvent());
            }
        } catch (Exception e) {
            Common.showErrorMessage(MessageType.SYSTEM_ERROR, this);
            Common.errorLog("[Exception] Failed load data jabatan", e);
        }
    }

    @Override
    public final void initForm() {
        btn_simpan.setIcon(Icons.SMALL_SAVE.get());
        btn_batal.setIcon(Icons.SMALL_CANCEL.get());
        loadViewTable(panelData);
        viewTableData.hideHeaderSeparator();
        viewTableData.autoSrollMode();
        viewTableData.clearTable();
        Common.setOpaqueComponent(false, this, tabPane, jPanel1, jPanel2, jPanel3, jPanel4, panelData);
        tabPane.removeAll();
        tabPane.repaint();
        tabPane.revalidate();

        new Thread(() -> {
            MitraDetail mitraDetail = new MitraDetail();
            tabPane.addTab("Detail", mitraDetail);
            formInput.add(mitraDetail);
            MitraAccess mitraAccess = new MitraAccess();
            tabPane.addTab("Mitra Akses", mitraAccess);
            formInput.add(mitraAccess);
            APIAccess apiAccess = new APIAccess();
            tabPane.addTab("API Akses", apiAccess);
            formInput.add(apiAccess);
        }).start();
        resetForm();
    }

    @Override
    public void loadData() {
        loadData("");
    }

    @Override
    public void resetForm() {
        btn_batal.setText("Batal");
        Common.setVisibility(false, btn_batal, btn_simpan);
        formInput.forEach(mitra -> {
            mitra.resetForm();
        });
    }

}
